#
# Top level, common rules
#

# choose your favorite C compiler
CC=gcc

#
# Uncomment this to turn debugging on
# DEBUG:=1

#
# compile/link flags. Always use += to set variables here!
#
ifdef DEBUG
 OPT_FLAGS+=-g
 CFLAGS+=$(OPT_FLAGS) -pipe
 LDFLAGS+=-g
else
 ifdef PROFILE
   OPT_FLAGS+=-p -pg
   CFLAGS+=$(OPT_FLAGS) -pipe
   LDFLAGS+=-p -pg
 else
   OPT_FLAGS+=-O2 -fomit-frame-pointer
   CFLAGS+=$(OPT_FLAGS) "-DINLINE=extern inline" -pipe
   LDFLAGS+=-s
 endif
endif


#
# how picky should your compiler be? uncomment for paranoid gcc settings.
# PARANOID_GCC:=1

#
# apply known-good GCC compiler flags.
#
ifeq ($(CC),gcc)
  OPT_FLAGS+=-Wall -Wshadow -Wno-uninitialized
  ifdef PARANOID_GCC
    OPT_FLAGS+=-Wstrict-prototypes -Wcast-qual -Wcast-align -Wpointer-arith -Wbad-function-cast -Waggregate-return -Winline
  endif
endif


#
# set 'install' program
#
INSTALL=install

#
# install with 644 permission:
#
INSTALL-TXT=install -m 644

#
# set `ar' archiver...
#
AR=ar

#
# `cp -f' : `cp' with force overwrite
#
CP=cp -f

#
# `ln -f -s' : `ln' with soft links, force overwrite
#
LN=ln -f -s

#
# `mkdir -p' or `mkdirhier' : make a directory and all missing directory parents
#
MKDIR=mkdir -p
#MKDIR=mkdirhier


#
# choose a variation of `echo' that interprets \n as newline.
# keep commented to enable autodetection.
#
#ECHO=echo
#ECHO=echo -e

#
# where is bash on your system?
# keep commented to enable autodetection.
#
#BASH=/bin/bash


#
# only if you know what you are doing:
# options to used to link shared libraries.
# keep commented to enable autodetection.
#
# this is for Linux
#LDFLAGS_SOLIB=-lc -shared -Wl,-soname,
#
# and this for SunOS
#LDFLAGS_SOLIB=-lc -shared -Wl,-h,


#
# --------------- no user-serviceable parts below this line ----------------
#

#
# m4 preprocessor
#
M4=m4

ifeq ($(prefix),)
  include $(TOPDIR)/MakePaths
endif

ifeq ($(LDFLAGS_SOLIB),)
  include $(TOPDIR)/MakeShlibs
endif

ifeq ($(filter -r,$(MAKEFLAGS)),)
  MAKEFLAGS+=-r
endif

TWIN_VERSION_STR=0.3.9

CFLAGS+=-I$(TOPDIR)/include

MODFLAGS+=-fPIC -DCONF_THIS_MODULE


CONF:=$(TOPDIR)/conf/config.status

LIBTWUTF:=-L$(TOPDIR)/libs/libTutf -lTutf

LIBTW:=-L$(TOPDIR)/libs/libTw -lTw
ifeq ($(CONF__SHLIBS),n)
  ifeq ($(CONF_SOCKET_GZ),y)
    LIBTW+=-lz
  endif
endif


ifeq ($(ECHO),)
  ifeq ($(strip $(shell echo -e)),)
    ECHO=echo -e
  else
    ECHO=echo
  endif
endif

ifeq ($(BASH),)
  BASH:=$(shell if [ -x /bin/bash ]; then echo /bin/bash; \
          else if bash -c : 2>/dev/null; then echo bash; \
	  else if [ -x "$$BASH" ]; then echo $$BASH; \
	  else echo sh; fi; fi; fi)
endif

BASH_VERSION:=$(word 1,$(subst ., ,$(shell $(BASH) -c "echo \$$BASH_VERSION")))

config $(CONF):
	@echo Starting configure for twin $(TWIN_VERSION_STR) ... ; \
	echo
	cd $(TOPDIR) ; \
	$(BASH) scripts/Configure

menuconf menuconfig:
	@echo Starting menu-dialog configure for twin $(TWIN_VERSION_STR) ... ; \
	echo
	cd $(TOPDIR) ; \
	$(BASH) scripts/Configure.dialog

reconfig: config all


nullconfig:
	cd $(TOPDIR) ; \
	$(BASH) scripts/Configure < /dev/null > /dev/null


# collect together in $(OBJS) all objs from $(BINS) looking in $(OBJS_xxx)
OBJS:=$(foreach B,$(BINS),$(OBJS_$(B)))

# same with $(MODOBJS) from $(MODBINS)
MODOBJS:=$(foreach B,$(MODBINS),$(OBJS_$(B)))

# same with $(ARLIBOBJS) from $(ARLIBS)
ARLIBOBJS:=$(foreach B,$(ARLIBS),$(OBJS_$(B)))

# same with $(CPPOBJS) from $(CPPBINS)
CPPOBJS:=$(foreach B,$(CPPBINS),$(OBJS_$(B)))

# set correct CFLAGS for objs compiled as modules
ifneq ($(MODOBJS),)
  _ALLFLAGS:=$(strip $(patsubst %,CFLAGS_%+=$(MODFLAGS)\n,$(MODOBJS)))
endif

_ALLBINS:=$(strip $(BINS) $(MODBINS) $(ARLIBS))

_ALLOBJS:=$(strip $(OBJS) $(MODOBJS) $(ARLIBOBJS) $(EXCL_OBJS))

_ALLSRCS:=$(strip $(subst .o,.c,$(filter %.o,$(_ALLOBJS)))) \
	  $(strip $(subst .o,.C,$(filter %.o,$(CPPOBJS))))


.modules: Makefile $(TOPDIR)/MakeRules $(CONF)
	@$(ECHO) -n Building .modules... ; \
	 $(ECHO) " $(_ALLFLAGS)" > $@ ; \
	 $(ECHO) " $(foreach B,$(BINS) $(MODBINS) $(CPPBINS),$(B): .$(B).link\n .$(B).link: $(OBJS_$(B))\n)" >> $@ ; \
	 $(ECHO) " $(foreach B,$(ARLIBS),$(B): .$(B).arlib\n .$(B).arlib: $(OBJS_$(B))\n)" >> $@ ; \
	 $(ECHO) done

.depend: $(TOPDIR)/scripts/Mkdep Makefile $(TOPDIR)/MakeRules $(_ALLSRCS)
	$< $(filter -I%,$(CFLAGS)) $(sort $(_ALLSRCS)) > $@



$(TOPDIR)/include/Tw/datasizes.h: $(TOPDIR)/scripts/Getsizes
	$< > $@


ifneq ($(wildcard $(TOPDIR)/.uni_types.flags),)
  include $(TOPDIR)/.uni_types.flags
else
  PREVIOUS_CONF__UNICODE=x
endif

force-remake:
	@:

ifeq ($(CONF__UNICODE),y)
  $(TOPDIR)/include/Tw/uni_types.h: $(TOPDIR)/MakeRules
	@$(ECHO) "PREVIOUS_CONF__UNICODE=$(CONF__UNICODE)" > $(TOPDIR)/.uni_types.flags; \
	 $(ECHO) "#ifndef _TW_UNI_TYPES_H" > $@ ; \
	 $(ECHO) "#define _TW_UNI_TYPES_H" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "typedef TW_BYTE16             byte16;" >> $@ ; \
	 $(ECHO) "typedef TW_BYTE32             byte32;" >> $@ ; \
	 $(ECHO) "typedef byte16                hwfont;" >> $@ ; \
	 $(ECHO) "typedef byte32                hwattr;" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#define TW_SIZEOFHWFONT       2" >> $@ ; \
	 $(ECHO) "#define TW_SIZEOFHWATTR       4" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#define TW_MAXHWFONT          0xFFFF" >> $@ ; \
	 $(ECHO) "#define TW_MAXHWATTR          0xFFFFFFFF" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#define HWATTR(col,ascii)     HWATTR32(col,ascii)" >> $@ ; \
	 $(ECHO) "#define HWATTR_COLMASK(attr)  HWATTR_COLMASK32(attr)" >> $@ ; \
	 $(ECHO) "#define HWATTR_FONTMASK(attr) HWATTR_FONTMASK32(attr)" >> $@ ; \
	 $(ECHO) "#define HWCOL(attr)           HWCOL32(attr)" >> $@ ; \
	 $(ECHO) "#define HWFONT(attr)          HWFONT32(attr)" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#endif /* _TW_UNI_TYPES_H */" >> $@
else
  $(TOPDIR)/include/Tw/uni_types.h: $(TOPDIR)/MakeRules
	@$(ECHO) "PREVIOUS_CONF__UNICODE=$(CONF__UNICODE)" > $(TOPDIR)/.uni_types.flags; \
	 $(ECHO) "#ifndef _TW_UNI_TYPES_H" > $@ ; \
	 $(ECHO) "#define _TW_UNI_TYPES_H" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "typedef TW_BYTE16             byte16;" >> $@ ; \
	 $(ECHO) "typedef TW_BYTE32             byte32;" >> $@ ; \
	 $(ECHO) "typedef byte                  hwfont;" >> $@ ; \
	 $(ECHO) "typedef byte16                hwattr;" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#define TW_SIZEOFHWFONT       1" >> $@ ; \
	 $(ECHO) "#define TW_SIZEOFHWATTR       2" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#define TW_MAXHWFONT          0xFFFF" >> $@ ; \
	 $(ECHO) "#define TW_MAXHWATTR          0xFFFFFFFF" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#define HWATTR(col,ascii)     HWATTR16(col,ascii)" >> $@ ; \
	 $(ECHO) "#define HWATTR_COLMASK(attr)  HWATTR_COLMASK16(attr)" >> $@ ; \
	 $(ECHO) "#define HWATTR_FONTMASK(attr) HWATTR_FONTMASK16(attr)" >> $@ ; \
	 $(ECHO) "#define HWCOL(attr)           HWCOL16(attr)" >> $@ ; \
	 $(ECHO) "#define HWFONT(attr)          HWFONT16(attr)" >> $@ ; \
	 $(ECHO) >> $@ ; \
	 $(ECHO) "#endif /* _TW_UNI_TYPES_H */" >> $@
endif

ifneq ($(CONF__UNICODE),$(PREVIOUS_CONF__UNICODE))
  $(TOPDIR)/include/Tw/uni_types.h: force-remake
endif

$(TOPDIR)/include/twin.h: $(TOPDIR)/include/Tw/uni_types.h
	@touch $@

$(TOPDIR)/include/Tw/Tw.h: $(TOPDIR)/include/Tw/uni_types.h
	@touch $@


$(TOPDIR)/scripts/Getsizes: $(TOPDIR)/scripts/getsizes.c $(TOPDIR)/include/Tw/datatypes.h
	$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

$(TOPDIR)/scripts/Mkdep: $(TOPDIR)/scripts/mkdep.c $(TOPDIR)/include/Tw/datasizes.h
	$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

$(TOPDIR)/scripts/Bitmap: $(TOPDIR)/scripts/bitmap.c
	$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@
	

#
# target to recursively build all subdirectories
#
subdirs: $(foreach D, $(SUBDIRS), dir-$(D))

dir-%:
	$(MAKE) -C $*

#
# torture is the target to compile all source files in the current directory
# under all possible configurations. VERY useful to spot bugs.
#
# Torture is just like torture, except it also recursively Tortures
# all subdirectories.
#

torture-%.c: %.c Makefile $(TOPDIR)/MakeRules $(TOPDIR)/scripts/Torture $(TOPDIR)/scripts/Bitmap
	@echo; echo "Torturing $< ..."; echo;
	$(BASH) $(TOPDIR)/scripts/Torture $(TOPDIR)/scripts/Bitmap $(CC) $(CFLAGS) $(CFLAGS_$@) -c $< -o $*.o -- $<

torture: $(_ALLSRCS) $(foreach S,$(_ALLSRCS),torture-$(S))
	
Torture: torture $(foreach D, $(SUBDIRS), Torture-dir-$(D))

Torture-dir-%:
	$(MAKE) Torture -C $*

#
# autogen is the target to build all autogenerated files that require
# extra tools (m4, bison, flex ...) and thus must be already present
# when releasing twin, to let people build with just compiler, bash, make.
# To 'make Torture', also sed and grep are required.
#
autogen: $(foreach D, $(SUBDIRS), autogen-dir-$(D))

autogen-dir-%:
	$(MAKE) autogen -C $*

install: $(foreach D, $(SUBDIRS), install-dir-$(D))

install-dir-%:
	$(MAKE) install -C $* DESTDIR=$(DESTDIR)

clean: $(foreach D, $(SUBDIRS), clean-dir-$(D))

clean-dir-%:
	$(MAKE) clean -C $*

%macros.h: m4/%macros.m4 $(TOPDIR)/include/m4/sockproto.m4
	$(M4) -I$(TOPDIR)/include $< > $@

%.o: %.c
	$(CC) $(CFLAGS) $(CFLAGS_$@) -c $< -o $@
	@$(ECHO) ' ifeq ($$(strip $$(CC) $$(CFLAGS) $$(CFLAGS_$@)),$(strip $(CC) $(CFLAGS) $(CFLAGS_$@)))\n'\
	'FILES_UP_TO_DATE += $@\n'\
	'endif' > .$@.flags

%.o: %.C
	$(CXX) $(CFLAGS) $(CXXFLAGS) $(CFLAGS_$@) $(CXXFLAGS_$@) -c $< -o $@
	@$(ECHO) ' ifeq ($$(strip $(CXX) $(CFLAGS) $(CXXFLAGS) $(CFLAGS_$@) $(CXXFLAGS_$@)),$(strip $(CXX) $(CFLAGS) $(CXXFLAGS) $(CFLAGS_$@) $(CXXFLAGS_$@)))\n'\
	'FILES_UP_TO_DATE += $@\n'\
	'endif' > .$@.flags

#
# this is the rule to link a binary. It should look like:
# % : $(OBJS_%)
#	$(CC) -o $* $(OBJS_$*) $(LDFLAGS) $(LDFLAGS_$*)
#	...
# but 1) nasty match-all rules like this are a real pain
# and 2) $(OBJS_%) doesn't expand
# so we put into .modules an explicited version of what follows:
# % : .%.link
# .%.link : $(OBJS_%)
#
# and we use patterns for the last step:
#       
.%.link:
	$(CC) -o $* $(OBJS_$*) $(LDFLAGS) $(LDFLAGS_$*)
	@$(LN) $* $@ ; \
	 $(ECHO) ' ifeq ($$(strip $$(CC) $$(OBJS_$*) $$(LDFLAGS) $$(LDFLAGS_$*)),$(strip $(CC) $(OBJS_$*) $(LDFLAGS) $(LDFLAGS_$*)))\n'\
	 'FILES_UP_TO_DATE += $@\n'\
	 'endif' > $@.flags

#
# same with `ar' archives
#
.%.arlib:
	rm -f $* && $(AR) cr $* $(OBJS_$*)
	@$(LN) $* $@ ; \
	 $(ECHO) ' ifeq ($$(strip $$(ARLIB) $$(OBJS_$*)),$(strip $(ARLIB) $(OBJS_$*)))\n'\
	 'FILES_UP_TO_DATE += $@\n'\
	 'endif' > $@.flags


# forbid GNU-make to `rm -f $(OBJS) $(MODOBJS) $(ARLIBOBJS)' after build
.SECONDARY: $(OBJS) $(MODOBJS) $(ARLIBOBJS)


#
# Find files whose flags have changed and force recompilation.
# For safety, this works in the converse direction:
# every file is forced, except those whose flags are positively up-to-date.
#
FILES := $(OBJS) $(MODOBJS) $(ARLIBOBJS) \
	 $(patsubst %,.%.link,$(BINS) $(MODBINS)) \
	 $(patsubst %,.%.arlib,$(ARLIBS))

#
# to avoid useless re-making, assume files in other dirs are already up-to-date:
# `make' must already visit all directories anyway.
#
FILES_UP_TO_DATE := $(filter-out $(wildcard * .*), $(FILES))


FILES_FLAGS_EXIST := $(wildcard .*.flags)
ifneq ($(FILES_FLAGS_EXIST),)
 #
 # this appends files whose flags are positively up-to-date to FILES_UP_TO_DATE
 #
 include $(FILES_FLAGS_EXIST)
endif

FILES_CHANGED := $(strip $(filter-out $(FILES_UP_TO_DATE), $(FILES)))

#
# force remaking by using a phony target as prerequisite
#
dummy:
	@:

ifneq ($(FILES_CHANGED),)

$(FILES_CHANGED): dummy

endif

