#
# top Makefile
#
TOPDIR=.
THISDIR=.
SUBDIRS=$(wildcard include docs themes libs clients server)

make_IDENTITY:=$(wordlist 1,2,$(shell $(MAKE) -v))

ifneq ($(make_IDENTITY),GNU Make)
  all: make_is_not_GNU
  make_is_not_GNU:
	@echo [1m; \
	 echo "# Warning: GNU Make is required to build twin, but the '$(MAKE)' you are using" ; \
	 echo "# does not seem to be GNU Make. build will probably fail... " ; \
	 echo "# running '$(MAKE) -v' to get version information resulted in: " ; \
	 echo "--------------------------------------------------------" ; \
	 $(MAKE) -v ; \
	 echo "--------------------------------------------------------" ; \
	 echo [0m
endif



all: build-subdirs
	@echo [1m; \
	 echo "# twin is now fully compiled." ; \
	 echo "# (if you want, you can build user-contributed programs with '$(MAKE) -C contrib')" ; \
	 echo "# As next step, you probably want to run '$(MAKE) install' as root." ; \
	 echo [0m



#
ifneq ($(wildcard $(TOPDIR)/conf/conf.current),)
  include $(TOPDIR)/conf/conf.current
endif


include $(TOPDIR)/makerules



#
# ensure libraries are built first
#
dir-clients dir-server: dir-libs

dir-libs dir-docs: dir-include

dir-include: $(CONF) include/Tw/Twautoconf.h

do-autogen: dir-include

pre-autogen: include/autoconf.h

fakeconf:
	if [ -f $(CONF) ]; then true; else touch $(CONF); fi

#
Torture: fakeconf autogen



# libtool and autoconf stuff

#
# libtool scripts must already exist in order for './configure'
# to be generated correctly
# and include/autoconf.h.in must already exist in order for './configure'
# to correctly generate include/autoconf.h
#

ADMIN_LIBTOOLS:=admin/ltmain.sh admin/config.guess admin/config.sub

$(ADMIN_LIBTOOLS):
	libtoolize -c

ADMIN_ACLOCAL:=admin/aclocal.m4

DISTCLEAN_EMPTY_FILES:=$(ADMIN_ACLOCAL) $(ADMIN_LIBTOOLS)

$(ADMIN_ACLOCAL):
	@if [ -f /usr/share/aclocal/libtool.m4 ]; then \
	  echo $(LN) /usr/share/aclocal/libtool.m4 $@ ; \
	  $(LN) /usr/share/aclocal/libtool.m4 $@ ; \
	else \
	  echo touch $@; \
	  touch $@; \
	fi

configure: configure.in $(ADMIN_LIBTOOLS) $(ADMIN_ACLOCAL) include/autoconf.h.in
	rm -f $@ && autoconf --localdir=admin

include/autoconf.h.in: configure.in
	rm -f $@ && autoheader

config.status libtool: configure $(ADMIN_LIBTOOLS)
	@echo Updating config.status libtool
	./configure --cache-file=config.cache --no-create

#
# was:
#
# Makefile: Makefile.in
#
# makeautoconf: makeautoconf.in
#
# conf/conf.auto: conf/conf.auto.in
#
# Makefile makeautoconf conf/conf.auto: config.status
#	@echo ...
#
Makefile: Makefile.in

makeautoconf: makeautoconf.in Makefile

conf/conf.auto: conf/conf.auto.in Makefile

Makefile: config.status
	@echo Updating Makefile makeautoconf conf/conf.auto
	./config.status

#
# this is an overkill, as it forces recompiling all sources that
# include "autoconf.h" or "Tw/Twautoconf.h" (almost every one)
# after each time someone runs ./configure
#
# include/autoconf.h: config.status include/autoconf.h.in 
#	rm -f $@ && ./config.status
#
# unluckily it is needed to correctly bootstrap commands like
# 'make -f Makefile.in autogen' or 'make -f Makefile.in distclean',
# so the solution is:
# check whether include/autoconf.h is actually up-to-date
# (config.status does not touch it if its contents do not change),
# else remove it and run either ./config.status or ./configure.
# 
# Instead of having include/autoconf.h depend on config.status,
# we manually check whether config.status exists and make it if needed.
#
include/autoconf.h: include/autoconf.h.in
	@echo Updating include/autoconf.h
	if [ ! -f config.status ]; then \
	  $(MAKE) -f Makefile.in config.status ; \
	fi ; \
	if [ conf/conf.auto -nt config.status -a \
	     conf/conf.auto -nt include/autoconf.h.in ]; then \
	  touch $@; \
	else \
	  rm -f $@ ; \
	  ./config.status ; \
	fi

bootstrap: $(CONF)



#
install:
	$(INSTALL-DIR) $(DESTDIR)$(libdir)/twin
	$(INSTALL-TXT) system.twinrc $(DESTDIR)$(libdir)/twin
	$(LN) system.twinrc $(DESTDIR)$(libdir)/twin/.twinrc
	$(INSTALL-BIN) system.twenvrc.sh $(DESTDIR)$(libdir)/twin
	$(LN) system.twenvrc.sh $(DESTDIR)$(libdir)/twin/.twenvrc.sh
ifeq ($(CONF__SHLIBS),y)
	@echo [1m ; \
	 echo "# If this is the first time you installed twin $(TWIN_VERSION_STR)" ; \
	 echo "# you probably need to run some kind of administrative command" ; \
	 echo "# to let your system know about newly installed shared libraries" ; \
	 echo "# "
  ifeq ($(SYS_SHLIBS),native)
	@echo "# if you do not know what to run, you can try with:"
    ifeq ($(OS),Linux)
	@echo "# ldconfig"
    else
	@echo "# ldconfig -R"
    endif
  else
	@echo "# if you do not know what to run, libtool can usually do it for you:" ; \
	 echo "# just execute:" ; \
	 echo "# libtool --finish $(libdir)"
  endif
	@echo
endif
	@echo "# As next step, you probably want to run '$(MAKE) clean'" ; \
	 echo "# Or, if something went wrong, '$(MAKE) uninstall'" ; \
	 echo "# " ; \
	 echo "# Installation should be completed. Type 'twstart' and enjoy." ; \
	 echo [0m

uninstall:
	cd $(DESTDIR)$(libdir)/twin && \
	   rm -f system.twinrc .twinrc system.twenvrc.sh .twenvrc.sh || true
	rmdir $(DESTDIR)$(libdir)/twin || true

clean: fakeconf autogen
	rm -f .dialog_* ; \
	if [ ! -s $(CONF) ]; then rm -f $(CONF); fi


distclean: clean
	rm -f $(CONF) \
	      config.status config.cache config.log libtool \
	      Makefile makeautoconf conf/conf.auto \
	      include/autoconf.h include/Tw/Twautoconf.h \
	      scripts/Mkdep scripts/Bitmap scripts/Getsizes \
	      include/Tw/datasizes.h include/Tw/uni_types.h \
	      .*.conf .hdepend `find . -type l` \
	      `find . -name .modules -o -name .depend` && \
	$(CP) Makefile.fake Makefile && \
	rm -f $(DISTCLEAN_REMOVE_FILES) $(DISTCLEAN_EMPTY_FILES) && \
	for i in $(DISTCLEAN_EMPTY_FILES); do \
	  echo > $$i; \
	done && \
	touch configure

pure: distclean
	rm -f Makefile admin/config.* \
	      $(DISTCLEAN_REMOVE_FILES) $(DISTCLEAN_EMPTY_FILES) \
	      configure makeversion server/rcparse_*.? \
	      include/autoconf.h.in docs/ltrace.conf \
	      themes/hw_gfx/default_*.xpm \
	      `find include -name version.h` `find . -name '*_m4.[ch]'` \
	      `find . -name makefragment` \
	      $(PURE_REMOVE_FILES)

