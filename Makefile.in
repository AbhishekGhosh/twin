#
# top Makefile
#
TOPDIR=.
THISDIR=.
SUBDIRS=$(wildcard include docs libs clients server)

make_VERSION:=$(wordlist 1,2,$(shell $(MAKE) -v))
ifneq ($(make_VERSION),GNU Make)
 all: make_is_not_GNU
endif

all: subdirs
	@echo ; \
	 echo "twin is now (hopefully) compiled." ; \
	 echo "As next step, you probably want to run '$(MAKE) install' as root."

make_is_not_GNU:
	@echo "Warning: GNU Make is required to build twin, but the '$(MAKE)' you are using" ; \
	 echo "does not seem to be GNU Make. build will probably fail... " ; \
	 echo "running '$(MAKE) -v' to get version information resulted in: " ; \
	 echo "--------------------------------------------------------" ; \
	 $(MAKE) -v ; \
	 echo "--------------------------------------------------------"


#
ifneq ($(wildcard $(TOPDIR)/conf/conf.current),)
  include $(TOPDIR)/conf/conf.current
endif


include $(TOPDIR)/makerules



#
# ensure libraries are built first
#
dir-clients dir-server: dir-libs

dir-libs dir-docs: dir-include

dir-include: $(CONF) include/Tw/Twautoconf.h

do-autogen: dir-include

pre-autogen: include/autoconf.h

fakeconf:
	if [ -f $(CONF) ]; then true; else touch $(CONF); fi

#
Torture: fakeconf autogen

#
install:
	$(INSTALL) -d $(DESTDIR)$(libdir)/twin
	$(INSTALL-TXT) system.twinrc $(DESTDIR)$(libdir)/twin
	$(LN) system.twinrc $(DESTDIR)$(libdir)/twin/.twinrc
	$(INSTALL) system.twenvrc.sh $(DESTDIR)$(libdir)/twin
	$(LN) system.twenvrc.sh $(DESTDIR)$(libdir)/twin/.twenvrc.sh
	@echo [1m ; \
	 echo If this is the first time you installed twin $(TWIN_VERSION_STR) ; \
	 echo you probably need to run \"ldconfig\" now. ; \
	 echo [0m ; \
	 echo "As next step, you probably want to run '$(MAKE) clean'" ; \
	 echo ; \
	 echo "Installation should be completed. Type 'twstart' and enjoy."

clean: fakeconf autogen
	rm -f .*.flags .*.link .*.arlib gmon.out core log .dialog_*
	if [ ! -s $(CONF) ]; then rm -f $(CONF); fi


distclean: clean
	rm -f $(CONF) $(LINKS) \
	      config.status config.cache config.log \
	      Makefile makeautoconf makeosvalues conf/conf.auto \
	      include/autoconf.h include/Tw/Twautoconf.h \
	      scripts/Mkdep scripts/Bitmap scripts/Getsizes \
	      include/Tw/datasizes.h include/Tw/uni_types.h \
	      .hdepend `find . -type l` \
	      `find . -name .modules -o -name .depend` ; \
	$(CP) Makefile.fake Makefile

pure: distclean
	rm -f Makefile configure include/autoconf.h.in server/rcparse_*.? \
	`find . -name \*m4.h -o -name \*m4.c`




# autoconf stuff

#
# include/autoconf.h.in must already be present in order for
# './configure' to correctly generate include/autoconf.h
#
configure: configure.in include/autoconf.h.in
	rm -f $@ && autoconf

include/autoconf.h.in: configure.in
	rm -f $@ && autoheader

config.status: configure
	@echo Updating config.status
	./configure --cache-file=config.cache --no-create
	
Makefile: Makefile.in

makeautoconf: makeautoconf.in

conf/conf.auto: conf/conf.auto.in

Makefile makeautoconf conf/conf.auto: config.status
	@echo Updating Makefile makeautoconf conf/conf.auto
	./config.status

#
# this is an overkill, as it forces recompiling all sources that
# include "autoconf.h" or "Tw/Twautoconf.h" (almost every one)
# after each time someone runs ./configure
#
# include/autoconf.h: config.status include/autoconf.h.in 
#	rm -f $@ && ./config.status
#
# unluckily it is needed to correctly bootstrap commands like
# 'make -f Makefile.in autogen' or 'make -f Makefile.in distclean',
# so the solution is:
# check whether include/autoconf.h is actually up-to-date
# (config.status does not touch it if its contents do not change),
# else remove it and run either ./config.status or ./configure.
# 
# Instead of having include/autoconf.h depend on config.status,
# we manually check whether config.status exists and make it if needed.
#
include/autoconf.h: include/autoconf.h.in
	@echo Updating include/autoconf.h
	if [ ! -f config.status ]; then \
	  $(MAKE) -f Makefile.in config.status ; \
	fi ; \
	if [ conf/conf.auto -nt config.status -a \
	     conf/conf.auto -nt include/autoconf.h.in ]; then \
	  touch $@; \
	else \
	  rm -f $@ ; \
	  ./config.status ; \
	fi

bootstrap: $(CONF)

