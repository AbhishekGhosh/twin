This file explains libTT internals:

it is only useful if you are a programmer and you want to modify libTT.

1) libTT is plain C code.
   User visible libTT objects are opaque C structure pointers, and those
   structures also contain a set of methods (function pointers), inaccessible
   by libTT clients but internally used by libTT to actually perform work
   on the objects. Clients can only call global libTT method wrappers that
   perform extensive sanity checkings (like checking that a ttwindow argument
   actually IS a ttwindow), then internally call the needed method.

2) Plain C has no object-oriented features like inheritance,
   so all the necessary object-oriented stuff is automagically produced
   using `m4' macros. For this purpose, various files exist:
   include/TT/m4/m4_TTtypes.m4
	m4 definitions for libTT objects hierarchy:
	defines all objects fields and methods.
	used to autogenerate a lot of files.
	before including it, you should define the m4 macros
	`extends', `field', `private', `protected', `public'
	to whatever appropriate for your purpose.
   libs/libTT/m4/TT.m4
	properly defines the keywords
	`extends', `field', `private', `protected', `public'
	then includes "include/TT/m4/m4_TTtypes.m4" to produce
	the C header file "libs/libTT/TTm4.h"
   libs/libTT/TTm4.h
	autogenerated from "libs/libTT/m4/TT.m4", it is an internal libTT
	header.
	contains the complete C definitions of all libTT object types and
	related method types.
   ------------
   libs/libTT/methods_base.h
   	C implementation of all libTT methods.
	before including it, you should define the m4 macros
	`DEF', `NEW', `SUPER', `REALIZE', `DEL', `DELSUPER'
	to whatever appropriate for your purpose.
   libs/libTT/m4/methods.m4
	properly defines the keywords
	`DEF', `NEW', `SUPER', `REALIZE', `DEL', `DELSUPER'
	then includes "libs/libTT/methods_base.h" to produce
	the C header file "libs/libTT/methodsm4.h"
	properly defines the keywords
	`extends', `field', `private', `protected', `public'
	then includes "include/TT/m4/m4_TTtypes.m4" to provide
	fallback implementations of methods not overridden in
	"libs/libTT/methods_base.h"
   ------------
   include/TT/m4/TTdefs.m4
	properly defines the keywords
	`extends', `field', `private', `protected', `public'
	then includes "include/TT/m4/m4_TTtypes.m4" to produce
	the C header file "include/TT/TTdefsm4.h"
    
   include/TT/TTdefsm4.h
	autogenerated from "libs/libTT/m4/TT.m4", it is a public libTT header.
	defines all object types and related method types.
	intentionally does NOT provide internal informations about
	the structures, but only opaque pointers.
	also provides C #defines to handle objects hierarchy.
