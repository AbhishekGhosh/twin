




/* This file was automatically generated from m4/decls.m4, do not edit! */


/*
 *  decls_m4.h  --  public header for libTT types declarations
 *
 *  Copyright (C) 2001 by Massimiliano Ghilardi
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 */

#ifndef _TT_DECLSM4_H
#define _TT_DECLSM4_H















/*
 *  m4/TTclasses.m4h  --  header for libTT objects inheritance
 *                      used as template for a lot of autogenerated files.
 *
 *  Copyright (C) 2001,2002 by Massimiliano Ghilardi
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 */






#define TT_LIST(el) \
el(ttobj)  el(ttevent) el(tteventbig) el(ttbitmask) el(tteventmask) el(ttcallback) el(ttlistener) el(tttimer) el(ttcomponent) el(ttdata) el(ttvisible) el(ttnative) el(ttwidget) el(ttlabel) el(tttooltip) el(ttbuttongroup) el(ttanybutton) el(ttbutton) el(ttcheckbutton) el(ttradiobutton) el(ttanyscroll) el(ttscrollbar) el(ttslider) el(ttprogressbar) el(ttscrollpane) el(ttwindow) el(ttframe) el(ttscroller) el(ttmenuitem) el(ttcheckmenuitem) el(ttradiomenuitem) el(ttmenu) el(ttmenubar) el(ttanytext) el(tttextfield) el(tttextarea) el(tttheme) el(ttapplication)

#define TT_NLIST(el) \
 el(ttevent) el(tteventbig) el(ttbitmask) el(tteventmask) el(ttcallback) el(ttlistener) el(tttimer) el(ttcomponent) el(ttdata) el(ttvisible) el(ttnative) el(ttwidget) el(ttlabel) el(tttooltip) el(ttbuttongroup) el(ttanybutton) el(ttbutton) el(ttcheckbutton) el(ttradiobutton) el(ttanyscroll) el(ttscrollbar) el(ttslider) el(ttprogressbar) el(ttscrollpane) el(ttwindow) el(ttframe) el(ttscroller) el(ttmenuitem) el(ttcheckmenuitem) el(ttradiomenuitem) el(ttmenu) el(ttmenubar) el(ttanytext) el(tttextfield) el(tttextarea) el(tttheme) el(ttapplication)

#define TT_TYPELIST(el) \
el(ttbyte) el(ttshort) el(ttint) el(ttcol) el(ttfont) el(ttattr) el(ttopaque) el(ttany) el(ttpointer) el(ttstring) el(ttfunction)

/* typedefs for objects structures */


/** ttobj: The superclass of all objects */                                    
typedef struct s_ttobj *	ttobj;  
/** ttevent: The common part of all events. */                            
typedef struct s_ttevent *	ttevent; 
/** tteventbig: The union of all events. */                                
typedef struct s_tteventbig *	tteventbig; 
/** ttbitmask: a bitmap mask of generic (ttany) values;
 * used, among others, to hold bitmaps of ttevent evtypes, evcodes and
 * components to block specific ttevents while calling event listeners.
 */                
typedef struct s_ttbitmask *	ttbitmask; 
/** tteventmask: a set of ttbitmasks used to block
 * events matching certain criteria */                
typedef struct s_tteventmask *	tteventmask; 
/** ttcallback: The entry point for internal event-based callbacks from target drivers */                
typedef struct s_ttcallback *	ttcallback; 
/** ttlistener: A ttcallback derivative for user-set event-based callbacks */                                        
typedef struct s_ttlistener *	ttlistener; 
/** tttimer: A ttlistener derivative for timer-based callbacks */                
typedef struct s_tttimer *	tttimer; 
/** ttcomponent: The superclass of all components (visible objects, groups, applications, ...) */                
typedef struct s_ttcomponent *	ttcomponent; 
/**
 * ttdata: wrapper for user-defined data in ttcomponents;
 * this class is derived from ttcomponent to allow creating listeners on it,
 * but this implementation has the undesired side effect that you can
 * TT{Set,Get,Unset}KeyData_ttcomponent also on ttdatas themselves.
 */                    
typedef struct s_ttdata *	ttdata; 
/** ttvisible: The superclass of all visible objects */                                
typedef struct s_ttvisible *	ttvisible; 
/** ttnative: class representing all server visible objects not created by us */
typedef struct s_ttnative *	ttnative; 
/** ttwidget: The superclass of all window-like visible containers */                                        
typedef struct s_ttwidget *	ttwidget; 
/** ttlabel: A simple text label */        
typedef struct s_ttlabel *	ttlabel; 
/** tttooltip: A simple tooltip */            
typedef struct s_tttooltip *	tttooltip; 
/** ttbuttongroup: a mutual-exclusion group of radiobuttons */            
typedef struct s_ttbuttongroup *	ttbuttongroup; 
/** ttanybutton: the abstract class all buttons are derived from */                
typedef struct s_ttanybutton *	ttanybutton; 
/** ttbutton: a normal click-to-activate button */
typedef struct s_ttbutton *	ttbutton; 
/** ttcheckbutton: a two-state (on/off) button */
typedef struct s_ttcheckbutton *	ttcheckbutton; 
/** ttradiobutton: a two-state mutual-exclusion button */            
typedef struct s_ttradiobutton *	ttradiobutton; 
/** ttanyscroll: the abstract class all scroll-like widgets are derived from */                                
typedef struct s_ttanyscroll *	ttanyscroll; 
/** ttscrollbar: a normal, interactive scroll bar */    
typedef struct s_ttscrollbar *	ttscrollbar; 
/** ttslider: a sliding knob within a bounded interval */            
typedef struct s_ttslider *	ttslider; 
/** ttprogressbar: a percentage completion bar */        
typedef struct s_ttprogressbar *	ttprogressbar; 
/** ttscrollpane: a scrollable widget;
 * it keeps track of its wl and hl
 * from the ttwidgets you put inside it;
 * also used as the scrollpane of a ttscroller.
 */        
typedef struct s_ttscrollpane *	ttscrollpane; 
/** ttwindow: a full-featured window */        
typedef struct s_ttwindow *	ttwindow; 
/** ttframe: a toplevel window */    
typedef struct s_ttframe *	ttframe; 
/** ttscroller: a scrollable container;
 * you can put any ttwidget inside its scrollpane
 */    
typedef struct s_ttscroller *	ttscroller; 
/** ttmenuitem: a simple line in a menu */    
typedef struct s_ttmenuitem *	ttmenuitem; 
/** ttcheckmenuitem: a checkable line in a menu */
typedef struct s_ttcheckmenuitem *	ttcheckmenuitem; 
/** ttradiomenuitem: a radio (mutual-exclusion) line in a menu */
typedef struct s_ttradiomenuitem *	ttradiomenuitem; 

/** ttmenu: a line in a menu pointing to a sub menu */    
typedef struct s_ttmenu *	ttmenu; 
/** ttmenubar: a complete menu bar */
typedef struct s_ttmenubar *	ttmenubar; 
/** ttanytext: the superclass of all text-only widgets */        
typedef struct s_ttanytext *	ttanytext; 
/** tttextfield: a single line user editable text-only widget */
typedef struct s_tttextfield *	tttextfield; 
/** tttextarea: a multi line user editable text-only widget */
typedef struct s_tttextarea *	tttextarea; 

/** tttheme: the look-n-feel of the application */                    
typedef struct s_tttheme *	tttheme; 
/** ttapplication: the topmost object */    
typedef struct s_ttapplication *	ttapplication;




/* typedefs for methods structures (runtime types) */
typedef struct s_ttfn *	ttfn;

/* useful types */
typedef void (*ttlistener_fn)(ttany arg0);
typedef void (*ttvisible_repaint_fn)(ttvisible,ttshort,ttshort,ttshort,ttshort);

/* globally available runtime class types; returned by TTCLASSOF(<some object>) */


/** class of ttobj */
extern ttfn	TTFN_ttobj;  
/** class of ttevent */
extern ttfn	TTFN_ttevent; 
/** class of tteventbig */
extern ttfn	TTFN_tteventbig; 
/** class of ttbitmask */
extern ttfn	TTFN_ttbitmask; 
/** class of tteventmask */
extern ttfn	TTFN_tteventmask; 
/** class of ttcallback */
extern ttfn	TTFN_ttcallback; 
/** class of ttlistener */
extern ttfn	TTFN_ttlistener; 
/** class of tttimer */
extern ttfn	TTFN_tttimer; 
/** class of ttcomponent */
extern ttfn	TTFN_ttcomponent; 
/** class of ttdata */
extern ttfn	TTFN_ttdata; 
/** class of ttvisible */
extern ttfn	TTFN_ttvisible; 
/** class of ttnative */
extern ttfn	TTFN_ttnative; 
/** class of ttwidget */
extern ttfn	TTFN_ttwidget; 
/** class of ttlabel */
extern ttfn	TTFN_ttlabel; 
/** class of tttooltip */
extern ttfn	TTFN_tttooltip; 
/** class of ttbuttongroup */
extern ttfn	TTFN_ttbuttongroup; 
/** class of ttanybutton */
extern ttfn	TTFN_ttanybutton; 
/** class of ttbutton */
extern ttfn	TTFN_ttbutton; 
/** class of ttcheckbutton */
extern ttfn	TTFN_ttcheckbutton; 
/** class of ttradiobutton */
extern ttfn	TTFN_ttradiobutton; 
/** class of ttanyscroll */
extern ttfn	TTFN_ttanyscroll; 
/** class of ttscrollbar */
extern ttfn	TTFN_ttscrollbar; 
/** class of ttslider */
extern ttfn	TTFN_ttslider; 
/** class of ttprogressbar */
extern ttfn	TTFN_ttprogressbar; 
/** class of ttscrollpane */
extern ttfn	TTFN_ttscrollpane; 
/** class of ttwindow */
extern ttfn	TTFN_ttwindow; 
/** class of ttframe */
extern ttfn	TTFN_ttframe; 
/** class of ttscroller */
extern ttfn	TTFN_ttscroller; 
/** class of ttmenuitem */
extern ttfn	TTFN_ttmenuitem; 
/** class of ttcheckmenuitem */
extern ttfn	TTFN_ttcheckmenuitem; 
/** class of ttradiomenuitem */
extern ttfn	TTFN_ttradiomenuitem; 
/** class of ttmenu */
extern ttfn	TTFN_ttmenu; 
/** class of ttmenubar */
extern ttfn	TTFN_ttmenubar; 
/** class of ttanytext */
extern ttfn	TTFN_ttanytext; 
/** class of tttextfield */
extern ttfn	TTFN_tttextfield; 
/** class of tttextarea */
extern ttfn	TTFN_tttextarea; 
/** class of tttheme */
extern ttfn	TTFN_tttheme; 
/** class of ttapplication */
extern ttfn	TTFN_ttapplication;

/** class of ttfn */
extern ttfn	TTFN_ttfn;

/* #defines for objects hierarchy */



                                      
/** the superclass of ttevent */
#define TTsuper_ttevent	ttobj                             
/** the superclass of tteventbig */
#define TTsuper_tteventbig	ttevent                                 
/** the superclass of ttbitmask */
#define TTsuper_ttbitmask	ttobj                 
/** the superclass of tteventmask */
#define TTsuper_tteventmask	ttobj                 
/** the superclass of ttcallback */
#define TTsuper_ttcallback	ttobj                 
/** the superclass of ttlistener */
#define TTsuper_ttlistener	ttcallback                                         
/** the superclass of tttimer */
#define TTsuper_tttimer	ttlistener                 
/** the superclass of ttcomponent */
#define TTsuper_ttcomponent	ttobj                 
/** the superclass of ttdata */
#define TTsuper_ttdata	ttcomponent                     
/** the superclass of ttvisible */
#define TTsuper_ttvisible	ttcomponent                                 
/** the superclass of ttnative */
#define TTsuper_ttnative	ttvisible 
/** the superclass of ttwidget */
#define TTsuper_ttwidget	ttvisible                                         
/** the superclass of ttlabel */
#define TTsuper_ttlabel	ttwidget         
/** the superclass of tttooltip */
#define TTsuper_tttooltip	ttlabel             
/** the superclass of ttbuttongroup */
#define TTsuper_ttbuttongroup	ttcomponent             
/** the superclass of ttanybutton */
#define TTsuper_ttanybutton	ttwidget                 
/** the superclass of ttbutton */
#define TTsuper_ttbutton	ttanybutton 
/** the superclass of ttcheckbutton */
#define TTsuper_ttcheckbutton	ttbutton 
/** the superclass of ttradiobutton */
#define TTsuper_ttradiobutton	ttcheckbutton             
/** the superclass of ttanyscroll */
#define TTsuper_ttanyscroll	ttanybutton                                 
/** the superclass of ttscrollbar */
#define TTsuper_ttscrollbar	ttanyscroll     
/** the superclass of ttslider */
#define TTsuper_ttslider	ttanyscroll             
/** the superclass of ttprogressbar */
#define TTsuper_ttprogressbar	ttanyscroll         
/** the superclass of ttscrollpane */
#define TTsuper_ttscrollpane	ttwidget         
/** the superclass of ttwindow */
#define TTsuper_ttwindow	ttwidget         
/** the superclass of ttframe */
#define TTsuper_ttframe	ttwindow     
/** the superclass of ttscroller */
#define TTsuper_ttscroller	ttwindow     
/** the superclass of ttmenuitem */
#define TTsuper_ttmenuitem	ttvisible     
/** the superclass of ttcheckmenuitem */
#define TTsuper_ttcheckmenuitem	ttmenuitem 
/** the superclass of ttradiomenuitem */
#define TTsuper_ttradiomenuitem	ttcheckmenuitem 
/** the superclass of ttmenu */
#define TTsuper_ttmenu	ttmenuitem
     
/** the superclass of ttmenubar */
#define TTsuper_ttmenubar	ttvisible 
/** the superclass of ttanytext */
#define TTsuper_ttanytext	ttwindow         
/** the superclass of tttextfield */
#define TTsuper_tttextfield	ttanytext 
/** the superclass of tttextarea */
#define TTsuper_tttextarea	tttextfield 
/** the superclass of tttheme */
#define TTsuper_tttheme	ttcomponent
                     
/** the superclass of ttapplication */
#define TTsuper_ttapplication	ttcomponent    






/* public, public_set and exported methods */










/* ttobj public, public_set and exported methods */                                

/** increase by 1 the reference count of object `o' */
void TTRef_ttobj(ttobj o);

/** decrease by 1 the reference count of object `o' */
void TTUnref_ttobj(ttobj o);  

/* ttevent public, public_set and exported methods */

/** create a ttevent with given `evtype', `evcode' and `evflags' */
ttevent TTCreate_ttevent(ttuint evtype, ttuint evcode, ttuint evflags);

/** fire the ttevent `ev' on ttcomponent `o' */
void TTFire_ttevent(ttevent ev, ttcomponent o); 

/* tteventbig public, public_set and exported methods */


/** create a tteventbig with given fields */
tteventbig TTCreate8_tteventbig(ttuint evtype, ttuint evcode, ttuint evflags,ttshort x, ttshort y, ttshort w, ttshort h, ttany value, ttany old_value, ttuint len, TT_CONST ttbyte *data);

/** create a tteventbig with given fields */
tteventbig TTCreate4_tteventbig(ttuint evtype, ttuint evcode, ttuint evflags,ttshort x, ttshort y, ttshort w, ttshort h);

/** create a tteventbig with given fields */
tteventbig TTCreate4s4_tteventbig(ttuint evtype, ttuint evcode, ttuint evflags,ttany value, ttany old_value, ttuint len, TT_CONST ttbyte *data); 

/* ttbitmask public, public_set and exported methods */

/** create a ttbitmask equal to given one */
ttbitmask TTClone_ttbitmask(ttbitmask o);

/** create a ttbitmask with given value */
ttbitmask TTCreate_ttbitmask(ttany value);

/** create a ttbitmask with given value array */
ttbitmask TTCreateA_ttbitmask(ttopaque n, TT_ARG_READ ttany *value);

/** initialize the ttbitmask `o' to empty */
void TTClear_ttbitmask(ttbitmask o);

/** initialize the ttbitmask `o' to full */
void TTFill_ttbitmask(ttbitmask o);

/** negate (i.e. make complement of) the ttbitmask `o' */
void TTNegate_ttbitmask(ttbitmask o);

/** change ttbitmask `o' applying given truth table (i.e. logical operation) */
void TTChange_ttbitmask(ttbitmask o, ttuint truth_table);

/** check whether `value' is member of the ttbitmask `o' */
ttbyte TTIsMember_ttbitmask(ttbitmask o, ttany value);

/** add `value' to the ttbitmask `o' */
ttbyte TTAdd_ttbitmask(ttbitmask o, ttany value);

/** add `value' array to the ttbitmask `o' */
ttbyte TTAddA_ttbitmask(ttbitmask o, ttopaque n, TT_ARG_READ ttany *value);

/** remove `value' from the ttbitmask `o' */
ttbyte TTRemove_ttbitmask(ttbitmask o, ttany value);

/** remove `value' array from the ttbitmask `o' */
ttbyte TTRemoveA_ttbitmask(ttbitmask o, ttopaque n, TT_ARG_READ ttany *value);

/** combine ttbitmask `o' with `value' appling given truth table (i.e. logical operation) */
ttbyte TTCombine_ttbitmask(ttbitmask o, ttany value, ttuint truth_table);

/** combine ttbitmask `o' with `value' array appling given truth table (i.e. logical operation) */
ttbyte TTCombineA_ttbitmask(ttbitmask o, ttopaque n, TT_ARG_READ ttany *value, ttuint truth_table);

/** combine ttbitmask `o' with `o2' appling given truth table (i.e. logical operation) */
ttbyte TTCombineB_ttbitmask(ttbitmask o, TT_ARG_READ ttbitmask o2, ttuint truth_table); 

/* tteventmask public, public_set and exported methods */

/** create a tteventmask with given fields */
tteventmask TTCreate_tteventmask(TT_ARG_DIE ttbitmask evtype_mask, TT_ARG_DIE ttbitmask evcode_mask, TT_ARG_DIE ttbitmask component_mask);

/** set the mask of blocked event types */
void TTSetEvtypeMask_tteventmask(tteventmask o, TT_ARG_DIE ttbitmask evtype_mask);

/** set the mask of blocked event codes */
void TTSetEvcodeMask_tteventmask(tteventmask o, TT_ARG_DIE ttbitmask evcode_mask);

/** set the mask of blocked event components */
void TTSetComponentMask_tteventmask(tteventmask o, TT_ARG_DIE ttbitmask component_mask);

/** set the truth table to combine masks of evtypes, evcodes and components of blocked events */
void TTSetTruthTable_tteventmask(tteventmask o, ttuint truth_table); 

/* ttcallback public, public_set and exported methods */     

/* ttlistener public, public_set and exported methods */

/** create a ttlistener for a ttcomponent with given fields */
ttlistener TTCreate_ttlistener(ttcomponent o, ttuint evtype, ttuint lflags, ttlistener_fn function, ttany arg);

/** create a ttlistener for a ttcomponent with given fields */
ttlistener TTCreateA_ttlistener(ttcomponent o, TT_ARG_DIE ttevent ev, ttuint lflags, ttuint narg_component, ttuint narg_event, ttuint nargs, ttlistener_fn function, TT_ARG_READ ttany *args);

/** create a ttlistener for a ttcomponent with given fields */
ttlistener TTCreateV_ttlistener(ttcomponent o, TT_ARG_DIE ttevent ev, ttuint lflags, ttuint narg_component, ttuint narg_event, ttuint nargs, ttlistener_fn function, va_list *vargs);


/** create a ttlistener for a ttcomponent "del" ttevent with given fields */
ttlistener TTCreateDel_ttlistener(ttcomponent o, ttuint lflags, ttlistener_fn function);

/** create a ttlistener for a ttcomponent "askclose" ttevent with given fields */
ttlistener TTCreateAskclose_ttlistener(ttcomponent o, ttuint lflags, ttlistener_fn function);

/** create a ttlistener for a ttcomponent "key" ttevent with given fields */
ttlistener TTCreateKey_ttlistener(ttcomponent o, ttuint evcode, ttuint evflags, ttuint lflags, ttlistener_fn function);

/** create a ttlistener for a ttcomponent "mouse" ttevent with given fields */
ttlistener TTCreateMouse_ttlistener(ttcomponent o, ttuint evcode, ttuint evflags, ttuint lflags, ttlistener_fn function);

/** create a ttlistener for a ttcomponent "activate" ttevent with given fields */
ttlistener TTCreateActivate_ttlistener(ttcomponent o, ttuint lflags, ttlistener_fn function);

/** create a ttlistener for a ttcomponent "value change" ttevent with given fields */
ttlistener TTCreateChange_ttlistener(ttcomponent o, ttuint evcode, ttuint lflags, ttlistener_fn function);

/** create a ttlistener for a ttcomponent "key_data value change" ttevent with given fields (WARNING: listener will be called with `ttdata' as argument!)*/
ttlistener TTCreateKeyData_ttlistener(ttcomponent o, TT_ARG_READ ttbyte *key, ttuint lflags, ttlistener_fn function);

/** create a ttlistener for a ttcomponent "expose" ttevent with given fields */
ttlistener TTCreateExpose_ttlistener(ttcomponent o, ttuint lflags, ttlistener_fn function);


/** add `o' to the ttcomponent `c' */    
void TTAddTo_ttlistener(ttlistener o, ttcomponent c);

/** remove `o' from the ttcomponent it is attached to */    
void TTRemove_ttlistener(ttlistener o);

/** set the function args of the listener `o' */
ttbyte TTSetArgs_ttlistener(ttlistener o, ttuint lflags, ttuint nargs, TT_ARG_READ ttany *args);

/** set the mask of blocked events to be used while listener `o' is being called */
void TTSetEventMask_ttlistener(ttlistener o, TT_ARG_DIE tteventmask event_mask); 

/* tttimer public, public_set and exported methods */

/** create a tttimer with given fields */
tttimer TTCreateA_tttimer(ttcomponent r, ttuint lflags, ttuint narg_component, ttuint narg_timer, ttuint nargs, ttlistener_fn function, TT_ARG_READ ttany *args, ttuint delay_t, ttuint delay_f);

/** create a tttimer with given fields */
tttimer TTCreate_tttimer(ttcomponent r, ttuint lflags, ttlistener_fn function, ttany arg, ttuint delay_t, ttuint delay_f);

/** set delay (seconds and fraction of seconds) */
void TTSetDelay_tttimer(tttimer o, ttuint delay_t, ttuint delay_s);

/** enable or disable tttimer `o' */    
void TTSetEnabled_tttimer(tttimer o, ttbyte enabled);

/** get whether tttimer `o' is enabled or disabled */    
ttbyte TTIsEnabled_tttimer(TT_ARG_READ tttimer o); 

/* ttcomponent public, public_set and exported methods */

/** add the ttlistener `c' to `o' */
void TTAddListener_ttcomponent(ttcomponent o, ttlistener c);

/** remove the ttlistener `c' from `o' */
void TTRemoveListener_ttcomponent(ttcomponent o, ttlistener c);

/** associate `data' with `key' in ttcomponent `o' */
ttdata TTSetKeyData_ttcomponent(ttcomponent o, TT_ARG_READ ttbyte *key, ttany data);

/** get `data' associated with with `key' in ttcomponent `o' */
ttany TTGetKeyData_ttcomponent(ttcomponent o, TT_ARG_READ ttbyte *key);

/** remove `data' associated with `key' in ttcomponent `o' */
void TTUnsetKeyData_ttcomponent(ttcomponent o, TT_ARG_READ ttbyte *key);

/** get the ttdata containing `data' associated with with `key' in ttcomponent `o' */
ttdata TTGetData_ttcomponent(ttcomponent o, TT_ARG_READ ttbyte *key); 

/* ttdata public, public_set and exported methods */         

/* ttvisible public, public_set and exported methods */

/** add the ttvisible `o' into `parent' */    
void TTAddTo_ttvisible(ttvisible o, ttvisible parent);

/** remove the ttvisible `o' from its parent */    
void TTRemove_ttvisible(ttvisible o);

/** invalidate ttvisible `o' internal caches, used after a theme change */    
void TTInvalidate_ttvisible(ttvisible o);

/** set the ttvisible `o' to be visible or not */    
void TTSetVisible_ttvisible(ttvisible o, ttbyte on_off);

/** set the tttheme `theme' of the ttvisible `o' */    
void TTSetTheme_ttvisible(ttvisible o, tttheme theme);

/** actually draw (part of) the contents of the ttvisible `o' - internally called by TTBuiltinRepaint_ttvisible */    
void TTDraw_ttvisible(ttvisible o, ttshort x, ttshort y, ttshort w, ttshort h, ttshort pitch, TT_ARG_READ ttbyte *asciidata, TT_ARG_READ ttfont *fontdata, TT_ARG_READ ttattr *attrdata);

/** internal libTT method that repaints (part of) the ttvisible `o' using its theme */    
void TTBuiltinRepaint_ttvisible(ttvisible o, ttshort x, ttshort y, ttshort w, ttshort h);

/** change the internal libTT method used to repaint (part of) the ttvisible `o' */
void TTSetRepaint_ttvisible(ttvisible o, ttvisible_repaint_fn repaint);

/** add the ttvisible `child' into `o' */
void TTAdd_ttvisible(ttvisible o, ttvisible child);

/** request a repaint for the given part of the ttvisible `o' */
void TTExpose_ttvisible(ttvisible o, ttshort x, ttshort y, ttshort w, ttshort h); 

/* ttnative public, public_set and exported methods */

/** get the ttnative `root' object into which each top level ttvisible is added */    
ttnative TTGetRoot_ttnative(void);

/** get `w' (width) field of given ttnative */    
ttshort TTGetW_ttnative(TT_ARG_READ ttnative o);

/** get `h' (height) field of given ttnative */    
ttshort TTGetH_ttnative(TT_ARG_READ ttnative o);

/** create a ttnative with given fields */
ttnative TTCreate_ttnative(ttany); 

/* ttwidget public, public_set and exported methods */

/** set the position `x' and `y' of the ttwidget `o' */    
void TTSetXY_ttwidget(ttwidget o, ttshort x, ttshort y);

/** set the size `w' and `h' of the ttwidget `o' */    
void TTSetWH_ttwidget(ttwidget o, ttshort w, ttshort h);

/** set the inside scroll position `xl' of the ttwidget `o' */    
void TTSetXl_ttwidget(ttwidget o, ttint xl);

/** set the inside scroll position `yl' of the ttwidget `o' */    
void TTSetYl_ttwidget(ttwidget o, ttint yl);

/** set the inside scroll size `wl' of the ttwidget `o' */    
void TTSetWl_ttwidget(ttwidget o, ttint wl);

/** set the inside scroll size `hl' of the ttwidget `o' */    
void TTSetHl_ttwidget(ttwidget o, ttint hl);

/** set the the tttooltip of the ttwidget `o' */    
void TTSetTooltip_ttwidget(ttwidget o, tttooltip t);

/** set some (depeding on `mask') of the inside scroll position `xl' and `yl' of the ttwidget `o' */
void TTSetXlYl_ttwidget(ttwidget o, ttuint mask, ttint xl, ttint yl);

/** set some (depeding on `mask') of the inside scroll sizes `wl' and `hl' of the ttwidget `o' */
void TTSetWlHl_ttwidget(ttwidget o, ttuint mask, ttint wl, ttint hl);

/** set some (depeding on `mask') of the position `x' and `y' and the size `w' and `h' of the ttwidget `o' */
void TTSetXYWH_ttwidget(ttwidget o, ttuint mask, ttshort x, ttshort y, ttshort w, ttshort h);

/** set the position `x' of the ttwidget `o' */
void TTSetX_ttwidget(ttwidget o, ttshort x);

/** set the position `y' of the ttwidget `o' */
void TTSetY_ttwidget(ttwidget o, ttshort y);

/** set the size `w' of the ttwidget `o' */
void TTSetW_ttwidget(ttwidget o, ttshort w);

/** set the size `h' of the ttwidget `o' */
void TTSetH_ttwidget(ttwidget o, ttshort h); 

/* ttlabel public, public_set and exported methods */

/** set the text of the ttlabel `o' */    
ttbyte TTDoSetFont_ttlabel(ttlabel o, TT_ARG_DIE ttfont * text, ttopaque len);

/** set the text of the ttlabel `o' */
ttbyte TTSetFont_ttlabel(ttlabel o, TT_ARG_READ ttfont * font);

/** set the text of the ttlabel `o' */
ttbyte TTSetText_ttlabel(ttlabel o, TT_ARG_READ ttbyte * text);

/** create a ttlabel with given text */
ttlabel TTCreate_ttlabel(TT_ARG_READ ttbyte * text); 

/* tttooltip public, public_set and exported methods */

/** set the widget the tttooltip `o' is connected to */    
void TTSetWidget_tttooltip(tttooltip o, ttwidget widget); 

/* ttbuttongroup public, public_set and exported methods */

/** add the ttradiobutton `r' to the ttbuttongroup `o' */    
void TTAdd_ttbuttongroup(ttbuttongroup o, ttradiobutton r);

/** remove the ttradiobutton `r' from the ttbuttongroup `o' */    
void TTRemove_ttbuttongroup(ttbuttongroup o, ttradiobutton r);

/** set which ttradiobutton in the ttbuttongroup `o' is checked */    
void TTSetChecked_ttbuttongroup(ttbuttongroup o, ttradiobutton r); 

/* ttanybutton public, public_set and exported methods */    

/** set the text of the ttanybutton `o' */    
ttbyte TTDoSetAttr_ttanybutton(ttanybutton o, TT_ARG_DIE ttattr * text, ttshort width, ttshort height, ttshort pitch);

/** set the text of the ttanybutton `o' */
ttbyte TTSetAttr_ttanybutton(ttanybutton o, TT_ARG_READ ttattr * text, ttshort width, ttshort height, ttshort pitch);

/** set the text of the ttanybutton `o' */
ttbyte TTSetFont_ttanybutton(ttanybutton o, TT_ARG_READ ttfont * text, ttshort width, ttshort height, ttshort pitch);

/** set the text of the ttanybutton `o' */
ttbyte TTSetText_ttanybutton(ttanybutton o, TT_ARG_READ ttbyte * text, ttshort width, ttshort height, ttshort pitch);

/** create a ttanybutton with given text */
ttanybutton TTCreate_ttanybutton(TT_ARG_READ ttbyte * text, ttshort width, ttshort height, ttshort pitch); 

/* ttbutton public, public_set and exported methods */

/** set whether the ttbutton `o' is pressed or not */    
void TTSetPressed_ttbutton(ttbutton o, ttbyte pressed);

/** get whether the ttbutton `o' is pressed or not */
ttbyte TTIsPressed_ttbutton(TT_ARG_READ ttbutton o);

/** create a ttbutton with given text */
ttbutton TTCreate_ttbutton(TT_ARG_READ ttbyte * text, ttshort width, ttshort height, ttshort pitch); 

/* ttcheckbutton public, public_set and exported methods */

/** set whether the ttbutton `o' is checked or not */    
void TTSetChecked_ttcheckbutton(ttcheckbutton o, ttbyte checked);

/** get whether the ttbutton `o' is checked or not */
ttbyte TTIsChecked_ttcheckbutton(TT_ARG_READ ttcheckbutton o);

/** create a ttcheckbutton with given text */
ttcheckbutton TTCreate_ttcheckbutton(TT_ARG_READ ttbyte * text, ttshort width, ttshort height, ttshort pitch); 

/* ttradiobutton public, public_set and exported methods */

/** add the ttradiobutton `o' to the ttbuttongroup `g' */
void TTAddToGroup_ttradiobutton(ttradiobutton o, ttbuttongroup g);

/** remove the ttradiobutton `o' from its ttbuttongroup */
void TTRemoveFromGroup_ttradiobutton(ttradiobutton o);

/** create a ttradiobutton with given text */
ttradiobutton TTCreate_ttradiobutton(TT_ARG_READ ttbyte * text, ttshort width, ttshort height, ttshort pitch); 

/* ttanyscroll public, public_set and exported methods */        

/** set the orientation of the ttanyscroll `o' */    
void TTSetOrientation_ttanyscroll(ttanyscroll o, ttbyte orientation);

/** set the (virtual) size of the ttanyscroll `o' */    
void TTSetSize_ttanyscroll(ttanyscroll o, ttint size);

/** set the size of the ttanyscroll `o' */    
void TTSetRealSize_ttanyscroll(ttanyscroll o, ttint real_size);

/** set the (virtual) view size of the ttanyscroll `o' */    
void TTSetViewSize_ttanyscroll(ttanyscroll o, ttint view_size);

/** set the (virtual) position of the ttanyscroll `o' */    
void TTSetPosition_ttanyscroll(ttanyscroll o, ttint position); 

/* ttscrollbar public, public_set and exported methods */

/** create a ttscrollbar with given fields */
ttscrollbar TTCreate1_ttscrollbar(ttbyte orientation);

/** create a ttscrollbar with given fields */
ttscrollbar TTCreate4_ttscrollbar(ttbyte orientation, ttint size, ttint real_size, ttint view_size); 

/* ttslider public, public_set and exported methods */

/** set the slide minimum of the ttslider `o' */    
void TTSetSlideMin_ttslider(ttslider o, ttint slide_min);

/** set the slide maximum of the ttslider `o' */    
void TTSetSlideMax_ttslider(ttslider o, ttint slide_max);

/** set the slide position of the ttslider `o' */    
void TTSetSlideValue_ttslider(ttslider o, ttint slide_value);

/** create a ttslider with given fields */
ttslider TTCreate_ttslider(ttbyte orientation, ttint real_size); 

/* ttprogressbar public, public_set and exported methods */

/** create a ttprogressbar with given fields */
ttprogressbar TTCreate_ttprogressbar(ttbyte orientation); 

/* ttscrollpane public, public_set and exported methods */

/** create a ttscrollpane with given size */
ttscrollpane TTCreate_ttscrollpane(ttshort w, ttshort h);

/** set the x scrollbar the ttscrollpane `o' is connected to */    
void TTSetBarX_ttscrollpane(ttscrollpane o, ttscrollbar bar_x);

/** set the y scrollbar the ttscrollpane `o' is connected to */    
void TTSetBarY_ttscrollpane(ttscrollpane o, ttscrollbar bar_y); 

/* ttwindow public, public_set and exported methods */

/** set the title of the ttwindow `o' */    
ttbyte TTSetTitle_ttwindow(ttwindow o, TT_ARG_READ ttbyte *title); 

/* ttframe public, public_set and exported methods */

/** set the menubar of the ttframe `o' */    
void TTSetMenubar_ttframe(ttframe o, ttmenubar m);

/** create a ttframe with given title */
ttframe TTCreate_ttframe(TT_ARG_READ ttbyte *title); 

/* ttscroller public, public_set and exported methods */

/** create a ttscroller with given size */
ttscroller TTCreate_ttscroller(ttshort w, ttshort h); 

/* ttmenuitem public, public_set and exported methods */ 

/* ttcheckmenuitem public, public_set and exported methods */ 

/* ttradiomenuitem public, public_set and exported methods */ 

/* ttmenu public, public_set and exported methods */ 

/* ttmenubar public, public_set and exported methods */

/** get the default ttmenubar used by ttwidget:s */
ttmenubar TTGetDefault_ttmenubar(void); 

/* ttanytext public, public_set and exported methods */ 

/* tttextfield public, public_set and exported methods */ 

/* tttextarea public, public_set and exported methods */ 

/* tttheme public, public_set and exported methods */

/** get the default tttheme used by ttvisible:s */
tttheme TTGetDefault_tttheme(void); 

/* ttapplication public, public_set and exported methods */

/** create (only one allowed) a ttapplication with given name */
ttapplication TTSet_ttapplication(TT_ARG_READ ttbyte * name);

/** get the current application */
ttapplication TTGet_ttapplication(void);








#endif /* _TT_DECLSM4_H */

