

ifdef(`c_comment', `', `define(`c_comment')')

c_comment([
/*
 *  m4/TTclasses.m4h  --  header for libTT objects inheritance
 *                      used as template for a lot of autogenerated files.
 *
 *  Copyright (C) 2001 by Massimiliano Ghilardi
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 */
])

divert(-1)

define(`NSHIFT', `ifelse($1, 0, `shift($@)', `NSHIFT(decr($1), shift(shift($@)))')')

define(`merge', $1$2)

define(`TTnlist')
define(`TTlist', `el(ttobj) TTnlist()')

define(`TTappend',  `define(`TTnlist', TTnlist() el($1))')

dnl
dnl I could have protected/public fields... for now, they all are just fields,
dnl and third argument can be one of:
dnl `'  : field is protected
dnl `r' : filed is public, clients can read it
dnl `w' : filed is public, clients can read and write it
dnl

dnl
dnl I could fill all fields of `protected' as I do for `exported',
dnl but currently those fields are not used with `protected', so no problem.
dnl

dnl ttobj: The superclass of all objects
dnl TTappend(ttobj)
define(`TTdef_ttobj',`field(ttfn_$1,FN)`'dnl
    field(ttopaque,id,r)`'dnl
    field(ttuint,refcount,r)`'dnl
    field(ttuint,oflags,r)`'dnl
    field(ttany,native)`'dnl
    field(ttany,private)`'dnl
    field(ttany,user_data,rw)`'dnl
    field(ttuint,events_inprogress,r)`'dnl
')
define(`TTFNdef_ttobj',`protected(ttuint order,order,$1)`'dnl
    protected(ttuint magicmask,magicmask,$1)`'dnl
    protected(ttuint magic,magic,$1)`'dnl
    protected(ttuint size,size,$1)`'dnl
    protected($1 (*New)(ttfn_$1 FN, $1),New,$1)`'dnl
    protected($1 (*Build)($1 o),Build,$1)`'dnl
    protected(void (*Break)($1 o),Break,$1)`'dnl
    protected(void (*Del)($1),Del,$1)`'dnl
    public(ttany (*GetValue)($1 o, ttuint which),GetValue,$1,2,ttany,$1,ttuint)`'dnl
    public(void (*SetValue)($1 o, ttuint which, ttany value),SetValue,$1,3,void,$1,ttuint,ttany)`'dnl
    public(void (*ChangeValue)($1 o, ttuint which, ttany nand_value, ttany xor_value),ChangeValue,$1,4,void,$1,ttuint,ttany,ttany)`'dnl
    exported(void (*Ref)($1 o),Ref,$1,1,void,$1)`'dnl
    exported(void (*Unref)($1 o),Unref,$1,1,void,$1)`'dnl
')

dnl ttevent: The common part of all events.
TTappend(ttevent)
define(`TTdef_ttevent',`extends(ttobj,$1)`'dnl
    field(ttcallback,callback,r)`'dnl
    field(ttcomponent,component,r)`'dnl
    field(ttuint,evtype,r)`'dnl
    field(ttuint,evcode,r)`'dnl
    field(ttuint,evflags,r)`'dnl
')
define(`TTFNdef_ttevent',`extends(ttobj,$1)`'dnl
    exported($1 (*Create)(ttuint evtype, ttuint evcode, ttuint evflags)`'dnl
             ,Create,$1,3,ttevent,ttuint,ttuint,ttuint)`'dnl
')

dnl tteventbig: The union of all events.
TTappend(tteventbig)
define(`TTdef_tteventbig',`extends(ttevent,$1)`'dnl
    field(ttshort,x,r)`'dnl
    field(ttshort,y,r)`'dnl
    field(ttshort,w,r)`'dnl
    field(ttshort,h,r)`'dnl
    field(ttuint,len,r)`'dnl
    field(TT_CONST ttbyte *,data,r)`'dnl
')
define(`TTFNdef_tteventbig',`extends(ttevent,$1)
    exported(tteventbig (*Create)(ttuint evtype, ttuint evcode, ttuint evflags`'dnl
             ,ttshort x, ttshort y, ttshort w, ttshort h, ttuint len, TT_CONST ttbyte *data)`'dnl
	     ,Create,$1,9,tteventbig,ttuint,ttuint,ttuint,ttshort,ttshort,ttshort,ttshort,ttuint,TT_CONST ttbyte *)`'dnl
')

dnl ttlistener: The entry point for library internal event-based callbacks
TTappend(ttlistener)
define(`TTdef_ttlistener',`extends(ttobj,$1)`'dnl
    field(ttuint,lflags,r)`'dnl
    field(ttcomponent,component,r)`'dnl
    field($1,prev,r)`'dnl
    field($1,next,r)`'dnl
')
define(`TTFNdef_ttlistener',`extends(ttobj,$1)
    protected($1 (*Create)(ttcomponent o),Create,$1)`'dnl
')

dnl ttcallback: A ttlistener derivative for user-set event-based callbacks
TTappend(ttcallback)
define(`TTdef_ttcallback',`extends(ttlistener,$1)`'dnl
    field(s_ttavl,AVL)`'dnl
    field(ttevent,event,r)`'dnl
    field(ttuint,narg_component,r)`'dnl
    field(ttuint,narg_event,r)`'dnl
    field(ttuint,nargs,r)`'dnl
    field(ttcallback_fn,function,r)`'dnl
    field(ttany *,args)`'dnl
')
define(`TTFNdef_ttcallback',`extends(ttlistener,$1)`'dnl
    exported($1 (*Create)(ttcomponent o, ttuint evtype, ttuint flags, ttcallback_fn function, ttany arg),Create,$1,5,$1,ttcomponent,ttuint,ttuint,ttcallback_fn,ttany)`'dnl
    exported($1 (*CreateA)(ttcomponent o, ttevent ev, ttuint flags, ttuint narg_component, ttuint narg_event, ttuint nargs, ttcallback_fn function, ttany TT_CONST *args)`'dnl
    ,CreateA,$1,8,$1,ttcomponent,ttevent,ttuint,ttuint,ttuint,ttuint,ttcallback_fn,ttany TT_CONST *)`'dnl
    exported($1 (*CreateV)(ttcomponent o, ttevent ev, ttuint flags, ttuint narg_component, ttuint narg_event, ttuint nargs, ttcallback_fn function, va_list vargs)`'dnl
    ,CreateV,$1,8,$1,ttcomponent,ttevent,ttuint,ttuint,ttuint,ttuint,ttcallback_fn,va_list)`'dnl
')

dnl ttcomponent: The superclass of all components (visible objects, groups, applications, ...)
TTappend(ttcomponent)
define(`TTdef_ttcomponent',`extends(ttobj,$1)`'dnl
    field(ttlistener,listeners,r)`'dnl
    field(ttcallback,callbacks,r)`'dnl
')
define(`TTFNdef_ttcomponent',`extends(ttobj,$1)`'dnl
')

dnl ttvisible: The superclass of all visible objects
TTappend(ttvisible)
define(`TTdef_ttvisible',`extends(ttcomponent,$1)`'dnl
    field(ttuint,vflags,r)`'dnl
    field(ttvisible,prev,r)`'dnl
    field(ttvisible,next,r)`'dnl
    field(ttvisible,parent,r)`'dnl
    field(ttvisible,child_first,r)`'dnl
    field(ttvisible,child_last,r)`'dnl
    field(tttheme,theme,r)`'dnl
    field(ttvisible_repaint_fn,repaint,r)`'dnl
')
define(`TTFNdef_ttvisible',`extends(ttcomponent,$1)`'dnl
    public(void (*AddTo)($1 o, ttvisible parent),AddTo,$1,2,void,$1,ttvisible)`'dnl
    public(void (*Remove)($1 o),Remove,$1,1,void,$1)`'dnl
    public(void (*SetVisible)($1 o, ttbyte on_off),SetVisible,$1,2,void,$1,ttbyte)`'dnl
    public(void (*SetTheme)($1 o, tttheme theme),SetTheme,$1,2,void,$1,tttheme)`'dnl
    public(void (*BuiltinRepaint)($1 o, ttshort x, ttshort y, ttshort w, ttshort h),BuiltinRepaint,$1,5,void,$1,ttshort,ttshort,ttshort,ttshort)`'dnl
    exported(void (*SetRepaint)($1 o, ttvisible_repaint_fn repaint),SetRepaint,$1,2,void,$1,ttvisible_repaint_fn)`'dnl
    exported(void (*Add)($1 o, ttvisible child),Add,$1,2,void,$1,ttvisible)`'dnl
    exported(void (*Expose)($1 o, ttshort x, ttshort y, ttshort w, ttshort h),Expose,$1,5,void,$1,ttshort,ttshort,ttshort,ttshort)`'dnl
')

dnl ttnative: class representing all server visible objects not created by us
TTappend(ttnative)
define(`TTdef_ttnative',`extends(ttvisible,$1)`'dnl
')
define(`TTFNdef_ttnative',`extends(ttvisible,$1)`'dnl
    public(ttnative (*GetRoot)(void),GetRoot,$1,0,ttnative)`'dnl
    exported(ttnative (*Create)(ttany),Create,$1,1,ttnative,ttany)`'dnl
')

dnl ttwidget: The superclass of all window-like visible containers
TTappend(ttwidget)
define(`TTdef_ttwidget',`extends(ttvisible,$1)`'dnl
    field(ttshort,x,r)`'dnl
    field(ttshort,y,r)`'dnl
    field(ttshort,w,r)`'dnl
    field(ttshort,h,r)`'dnl
')
define(`TTFNdef_ttwidget',`extends(ttvisible,$1)`'dnl
    public(void (*SetXYWH)($1 o, ttuint mask, ttshort x, ttshort y, ttshort w, ttshort h),SetXYWH,$1,6,void,$1,ttbyte,ttshort,ttshort,ttshort,ttshort)`'dnl
    exported(void (*SetXY)($1 o, ttshort x, ttshort y),SetXY,$1,3,void,$1,ttshort,ttshort)`'dnl
    exported(void (*SetWH)($1 o, ttshort w, ttshort h),SetWH,$1,3,void,$1,ttshort,ttshort)`'dnl
')

dnl ttlabel: A simple text label
TTappend(ttlabel)
define(`TTdef_ttlabel',`extends(ttwidget,$1)`'dnl
    field(ttshort,text_len,r)`'dnl
    field(ttfont *,text)`'dnl
')
define(`TTFNdef_ttlabel',`extends(ttwidget,$1)`'dnl
    public(ttbyte (*SetText)($1 o, TT_CONST ttbyte * text),SetText,$1,2,ttbyte,$1,TT_CONST ttbyte *)`'dnl
    exported(ttlabel (*Create)(TT_CONST ttbyte * text),Create,$1,1,ttlabel,TT_CONST ttbyte *)`'dnl
')

TTappend(ttanybutton)
define(`TTdef_ttanybutton',`extends(ttwidget,$1)`'dnl
    field(ttfont *,text)`'dnl
    field(ttshort,text_width,r)`'dnl
    field(ttshort,text_height,r)`'dnl
    field(struct s_ttshape,text_shape[ttbutton_shape_max])`'dnl
')
define(`TTFNdef_ttanybutton',`extends(ttwidget,$1)`'dnl
    public(ttbyte (*SetText)($1 o, TT_CONST ttfont * text, ttshort width, ttshort height, ttshort pitch),SetText,$1,5,ttbyte,$1,TT_CONST ttfont *,ttshort,ttshort,ttshort)`'dnl
    exported(ttanybutton (*Create)(TT_CONST ttfont * text, ttshort width, ttshort height, ttshort pitch),Create,$1,4,ttanybutton,TT_CONST ttfont *,ttshort,ttshort,ttshort)`'dnl
')

TTappend(ttbutton)
define(`TTdef_ttbutton',`extends(ttanybutton,$1)`'dnl
')
define(`TTFNdef_ttbutton',`extends(ttanybutton,$1)`'dnl
    public(void (*SetPressed)($1 o, ttbyte pressed),SetPressed,$1,2,void,$1,ttbyte)`'dnl
    exported(ttbutton (*Create)(TT_CONST ttfont * text, ttshort width, ttshort height, ttshort pitch),Create,$1,4,ttbutton,TT_CONST ttfont *,ttshort,ttshort,ttshort)`'dnl
    exported(ttbyte (*IsPressed)($1 o),IsPressed,$1,1,ttbyte,$1)`'dnl
')

TTappend(ttcheckbutton)
define(`TTdef_ttcheckbutton',`extends(ttbutton,$1)`'dnl
')
define(`TTFNdef_ttcheckbutton',`extends(ttbutton,$1)`'dnl
')

TTappend(ttradiobutton)
define(`TTdef_ttradiobutton',`extends(ttcheckbutton,$1)`'dnl
')
define(`TTFNdef_ttradiobutton',`extends(ttcheckbutton,$1)`'dnl
')

TTappend(ttscrollbar)
define(`TTdef_ttscrollbar',`extends(ttanybutton,$1)`'dnl
')
define(`TTFNdef_ttscrollbar',`extends(ttanybutton,$1)`'dnl
')

define(`TTdef_ttslider',`extends(ttanybutton,$1)`'dnl
')
define(`TTFNdef_ttslider',`extends(ttanybutton,$1)`'dnl
')

TTappend(ttbuttongroup)
define(`TTdef_ttbuttongroup',`extends(ttcomponent,$1)`'dnl
')
define(`TTFNdef_ttbuttongroup',`extends(ttcomponent,$1)`'dnl
')

TTappend(ttwindow)
define(`TTdef_ttwindow',`extends(ttwidget,$1)`'dnl
    field(ttmenubar,menubar)`'dnl
')
define(`TTFNdef_ttwindow',`extends(ttwidget,$1)`'dnl
')

dnl ttframe: A toplevel window
TTappend(ttframe)
define(`TTdef_ttframe',`extends(ttwindow,$1)`'dnl
')
define(`TTFNdef_ttframe',`extends(ttwindow,$1)`'dnl
')


dnl ttscroller: A scrollable container. You can put any ttwidget inside it
TTappend(ttscroller)
define(`TTdef_ttscroller',`extends(ttwindow,$1)`'dnl
    field(ttscrollbar,scrollx,r)`'dnl
    field(ttscrollbar,scrolly,r)')`'dnl
define(`TTFNdef_ttscroller',`extends(ttwindow,$1)`'dnl
')

dnl ttmenuitem: Represents a single line in a menu
TTappend(ttmenuitem)
define(`TTdef_ttmenuitem',`extends(ttvisible,$1)`'dnl
    field(ttbyte *,name)`'dnl
')
define(`TTFNdef_ttmenuitem',`extends(ttvisible,$1)`'dnl
')

dnl ttcheckmenuitem: A checkable line in a menu.
TTappend(ttcheckmenuitem)
define(`TTdef_ttcheckmenuitem',`extends(ttmenuitem,$1)`'dnl
')
define(`TTFNdef_ttcheckmenuitem',`extends(ttmenuitem,$1)`'dnl
')

dnl ttradiomenuitem: A radio line in a menu.
TTappend(ttradiomenuitem)
define(`TTdef_ttradiomenuitem',`extends(ttcheckmenuitem,$1)`'dnl
')
define(`TTFNdef_ttradiomenuitem',`extends(ttcheckmenuitem,$1)`'dnl
')

dnl ttmenu: Represents an entry in a menu
TTappend(ttmenu)
define(`TTdef_ttmenu',`extends(ttmenuitem,$1)
    field(ttmenubar,menubar,r)`'dnl
')
define(`TTFNdef_ttmenu',`extends(ttmenuitem,$1)`'dnl
')

dnl ttmenubar: A complete menu bar.
TTappend(ttmenubar)
define(`TTdef_ttmenubar',`extends(ttvisible,$1)`'dnl
')
define(`TTFNdef_ttmenubar',`extends(ttvisible,$1)`'dnl
    exported(ttmenubar (*GetDefault)(void),GetDefault,$1,0,ttmenubar)`'dnl
')

dnl ttanytext: The superclass of all text-only widgets
TTappend(ttanytext)
define(`TTdef_ttanytext',`extends(ttwindow,$1)`'dnl
    field(ttshort,text_len,r)`'dnl
    field(ttattr *,text)`'dnl
')
define(`TTFNdef_ttanytext',`extends(ttwindow,$1)`'dnl
')

dnl tttextfield: A one-line user-editable text-only widget
TTappend(tttextfield)
define(`TTdef_tttextfield',`extends(ttanytext,$1)`'dnl
')
define(`TTFNdef_tttextfield',`extends(ttanytext,$1)`'dnl
')

dnl tttextarea: A multi-line user-editable text-only widget
TTappend(tttextarea)
define(`TTdef_tttextarea',`extends(tttextfield,$1)`'dnl
')
define(`TTFNdef_tttextarea',`extends(tttextfield,$1)`'dnl
')

dnl tttheme: The look-n-feel of the application
TTappend(tttheme)
define(`TTdef_tttheme',`extends(ttcomponent,$1)
    field(ttbyte *,name)`'dnl
    field(ttfont,fill)`'dnl
    field(ttcol,bg[tttheme_bg_max])
    field(struct s_ttshape,shape[tttheme_shape_max][2])`'dnl
')
define(`TTFNdef_tttheme',`extends(ttcomponent,$1)`'dnl
    protected(ttattr *(*ComputeShapeButton)(ttbutton o, ttbyte button_i, ttbyte theme_i),ComputeShapeButton,$1,2,ttattr *,ttbutton,ttbyte,ttbyte)`'dnl
    exported(tttheme (*GetDefault)(void),GetDefault,$1,0,tttheme)`'dnl
')

dnl ttapplication: The topmost object
TTappend(ttapplication)
define(`TTdef_ttapplication',`extends(ttcomponent,$1)`'dnl
    field(ttbyte *,name)`'dnl
')
define(`TTFNdef_ttapplication',`extends(ttcomponent,$1)`'dnl
    exported(ttapplication (*Set)(TT_CONST ttbyte * name),Set,$1,1,ttapplication,TT_CONST ttbyte *)`'dnl
')



dnl defines for objects hierarchy
define(`m4super_ttobj', `ttobj')

define(`extends',`define(`m4super_$2',`$1')`'dnl
')
define(`field',`')
define(`el',`TTdef_$1($1)`'dnl
')
TTlist()

define(`field')
define(`extends')
define(`protected')
define(`public')
define(`exported')

undefine(`TTappend')
undefine(`el')

divert

