

ifdef(`c_comment', `', `define(`c_comment')')
ifdef(`c_doxygen', `', `define(`c_doxygen')')

dnl
dnl _R type modifier means TT_ARG_READ i.e. object will only be read (C `const')
dnl _W type modifier means TT_ARG_WRITE (this is the defualt)
dnl    i.e. object will be read and/or written to
dnl _D type modifier means TT_ARG_DIE i.e. object may not exist after call is invoked
dnl
dnl Quirk: it is currently not possible (since it generated wrong includes)
dnl to specify _R, _W or _D for objects in the types list at the end
dnl of methods declarations (protected,public,public_set,exported).
dnl It is instead possible to specify them for arrays.
dnl

ifdef(`_R', `', `define(`_R', `TT_ARG_READ')')
ifdef(`_W', `', `define(`_W', `TT_ARG_WRITE')')
ifdef(`_D', `', `define(`_D', `TT_ARG_DIE')')

c_comment(`
/*
 *  m4/TTclasses.m4h  --  header for libTT objects inheritance
 *                      used as template for a lot of autogenerated files.
 *
 *  Copyright (C) 2001,2002 by Massimiliano Ghilardi
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 */
')

divert(-1)

define(`TTtypelist', `el(ttbyte) el(ttshort) el(ttint) el(ttcol) el(ttfont) el(ttattr) el(ttopaque) el(ttany) el(ttpointer) el(ttstring) el(ttfunction)')

define(`NSHIFT', `ifelse($1, 0, `shift($@)', `NSHIFT(decr($1), shift(shift($@)))')')

define(`merge', $1$2)

define(`TTnlist')
define(`TTlist', `el(ttobj) TTnlist()')

define(`TTappend',  `define(`TTnlist', TTnlist() el($1))')

dnl
dnl We could have protected/public fields... for now, they all are just fields,
dnl and third argument can be one of:
dnl `'  : field is protected
dnl `r' : field is public, clients can read it
dnl `w' : field is public, clients can read and write it (this just means
dnl       a public, public_set or exported method to set it exists)
dnl

dnl
dnl We could fill all fields of `protected' as I do for `exported',
dnl but currently those fields are not used with `protected', so no problem.
dnl

dnl TTappend(ttobj)
define(`TTdef_ttobj',`dnl
`'`'c_comment(`/** ttobj: The superclass of all objects */')`'dnl
    field(ttfn_$1,FN)`'dnl
    field(ttopaque,id,r)`'dnl
    field(ttuint,refcount,r)`'dnl
    field(ttuint,oflags,r)`'dnl
    field(ttany,native)`'dnl
    field(ttany,target_private)`'dnl
    field(ttany,user_data,rw)`'dnl
    field(ttopaque,events_inprogress,r)`'dnl
    field(ttopaque,events_informed,r)`'dnl
')
define(`TTFNdef_ttobj',`dnl
    protected(ttuint order,order,$1)`'dnl
    protected(ttuint magicmask,magicmask,$1)`'dnl
    protected(ttuint magic,magic,$1)`'dnl
    protected(ttuint size,size,$1)`'dnl
    protected($1 (*New)(ttfn_$1 FN, $1 o),New,$1)`'dnl
    protected($1 (*Build)($1 o),Build,$1)`'dnl
    protected(void (*Break)($1 o),Break,$1)`'dnl
    protected(void (*Del)(_D $1 o),Del,$1)`'dnl
`'`'c_doxygen(`/** increase by 1 the reference count of object `o' */')`'dnl
`'`'exported(void (*Ref)($1 o),Ref,$1,1,void,$1)`'dnl
`'`'c_doxygen(`/** decrease by 1 the reference count of object `o' */')`'dnl
`'`'exported(void (*Unref)($1 o),Unref,$1,1,void,$1)`'dnl
')

TTappend(ttevent)
define(`TTdef_ttevent',`extends(ttobj,$1)`'dnl
`'`'c_comment(`/** ttevent: The common part of all events. */')`'dnl
    field(ttlistener,callback,r)`'dnl
    field(ttcomponent,component,r)`'dnl
    field(ttuint,evtype,r)`'dnl
    field(ttuint,evcode,r)`'dnl
    field(ttuint,evflags,r)`'dnl
    field(ttevent,prev)`'dnl
    field(ttevent,next)`'dnl
')
define(`TTFNdef_ttevent',`extends(ttobj,$1)`'dnl
`'`'c_doxygen(`/** create a ttevent with given `evtype', `evcode' and `evflags' */')`'dnl
`'`'exported(ttevent (*Create)(ttuint evtype, ttuint evcode, ttuint evflags)`'dnl
`'`'`'`'`'`',Create,$1,3,ttevent,ttuint,ttuint,ttuint)`'dnl
`'`'c_doxygen(`/** fire the ttevent `ev' on ttcomponent `o' */')`'dnl
`'`'exported(void (*Fire)($1 ev, ttcomponent o),Fire,$1,2,void,$1,ttcomponent)`'dnl
')

TTappend(tteventbig)
define(`TTdef_tteventbig',`extends(ttevent,$1)`'dnl
`'`'c_comment(`/** tteventbig: The union of all events. */')`'dnl
    field(ttshort,x,r)`'dnl
    field(ttshort,y,r)`'dnl
    field(ttshort,w,r)`'dnl
    field(ttshort,h,r)`'dnl
    field(ttany,value,r)`'dnl
    field(ttany,old_value,r)`'dnl
    field(ttuint,len,r)`'dnl
    field(TT_CONST ttbyte *,data,r)`'dnl
')
define(`TTFNdef_tteventbig',`extends(ttevent,$1)
`'`'c_doxygen(`/** create a tteventbig with given fields */')`'dnl
`'`'exported(tteventbig (*Create8)(ttuint evtype, ttuint evcode, ttuint evflags`'dnl
`'`'`'`'`'`',ttshort x, ttshort y, ttshort w, ttshort h, ttany value, ttany old_value, ttuint len, TT_CONST ttbyte *data)`'dnl
`'`'`'`'`'`',Create8,$1,11,tteventbig,ttuint,ttuint,ttuint,ttshort,ttshort,ttshort,ttshort,ttany,ttany,ttuint,TT_CONST ttbyte *)`'dnl
`'`'c_doxygen(`/** create a tteventbig with given fields */')`'dnl
`'`'exported(tteventbig (*Create4)(ttuint evtype, ttuint evcode, ttuint evflags`'dnl
`'`'`'`'`'`',ttshort x, ttshort y, ttshort w, ttshort h)`'dnl
`'`'`'`'`'`',Create4,$1,7,tteventbig,ttuint,ttuint,ttuint,ttshort,ttshort,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** create a tteventbig with given fields */')`'dnl
`'`'exported(tteventbig (*Create4s4)(ttuint evtype, ttuint evcode, ttuint evflags`'dnl
`'`'`'`'`'`',ttany value, ttany old_value, ttuint len, TT_CONST ttbyte *data)`'dnl
`'`'`'`'`'`',Create4s4,$1,7,tteventbig,ttuint,ttuint,ttuint,ttany,ttany,ttuint,TT_CONST ttbyte *)`'dnl
')

TTappend(ttbitmask)
define(`TTdef_ttbitmask',`extends(ttobj,$1)`'dnl
`'`'c_comment(`/** ttbitmask: a bitmap mask of generic (ttany) values;
 * used, among others, to hold bitmaps of ttevent evtypes, evcodes and
 * components to block specific ttevents while calling event listeners.
 */')`'dnl
    field(ttopaque,mask0)`'dnl
    field(ttopaque,mask_max)`'dnl
    field(ttopaque,mask_n)`'dnl
    field(ttany *,mask)`'dnl
')
define(`TTFNdef_ttbitmask',`extends(ttobj,$1)`'dnl
`'`'c_doxygen(`/** create a ttbitmask equal to given one */')`'dnl
`'`'exported(ttbitmask (*Clone)($1 o),Clone,$1,1,ttbitmask,$1)`'dnl
`'`'c_doxygen(`/** create a ttbitmask with given value */')`'dnl
`'`'exported(ttbitmask (*Create)(ttany value),Create,$1,1,ttbitmask,ttany)`'dnl
`'`'c_doxygen(`/** create a ttbitmask with given value array */')`'dnl
`'`'exported(ttbitmask (*CreateA)(ttopaque n, _R ttany *value),CreateA,$1,2,ttbitmask,ttopaque,_R ttany *)`'dnl
`'`'c_doxygen(`/** initialize the ttbitmask `o' to empty */')`'dnl
`'`'exported(void (*Clear)($1 o),Clear,$1,1,void,$1)`'dnl
`'`'c_doxygen(`/** initialize the ttbitmask `o' to full */')`'dnl
`'`'exported(void (*Fill)($1 o),Fill,$1,1,void,$1)`'dnl
`'`'c_doxygen(`/** negate (i.e. make complement of) the ttbitmask `o' */')`'dnl
`'`'exported(void (*Negate)($1 o),Negate,$1,1,void,$1)`'dnl
`'`'c_doxygen(`/** change ttbitmask `o' applying given truth table (i.e. logical operation) */')`'dnl
`'`'exported(void (*Change)($1 o, ttuint truth_table),Change,$1,2,void,$1,ttuint)`'dnl
`'`'c_doxygen(`/** check whether `value' is member of the ttbitmask `o' */')`'dnl
`'`'exported(ttbyte (*IsMember)($1 o, ttany value),IsMember,$1,2,ttbyte,$1,ttany)`'dnl
`'`'c_doxygen(`/** add `value' to the ttbitmask `o' */')`'dnl
`'`'exported(ttbyte (*Add)($1 o, ttany value),Add,$1,2,ttbyte,$1,ttany)`'dnl
`'`'c_doxygen(`/** add `value' array to the ttbitmask `o' */')`'dnl
`'`'exported(ttbyte (*AddA)($1 o, ttopaque n, _R ttany *value),AddA,$1,3,ttbyte,$1,ttopaque, _R ttany *)`'dnl
`'`'c_doxygen(`/** remove `value' from the ttbitmask `o' */')`'dnl
`'`'exported(ttbyte (*Remove)($1 o, ttany value),Remove,$1,2,ttbyte,$1,ttany)`'dnl
`'`'c_doxygen(`/** remove `value' array from the ttbitmask `o' */')`'dnl
`'`'exported(ttbyte (*RemoveA)($1 o, ttopaque n, _R ttany *value),RemoveA,$1,3,ttbyte,$1,ttopaque, _R ttany *)`'dnl
`'`'c_doxygen(`/** combine ttbitmask `o' with `value' appling given truth table (i.e. logical operation) */')`'dnl
`'`'exported(ttbyte (*Combine)($1 o, ttany value, ttuint truth_table),Combine,$1,3,ttbyte,$1,ttany,ttuint)`'dnl
`'`'c_doxygen(`/** combine ttbitmask `o' with `value' array appling given truth table (i.e. logical operation) */')`'dnl
`'`'exported(ttbyte (*CombineA)($1 o, ttopaque n, _R ttany *value, ttuint truth_table),CombineA,$1,4,ttbyte,$1,ttopaque,_R ttany *,ttuint)`'dnl
`'`'c_doxygen(`/** combine ttbitmask `o' with `o2' appling given truth table (i.e. logical operation) */')`'dnl
`'`'exported(ttbyte (*CombineB)($1 o, _R $1 o2, ttuint truth_table),CombineB,$1,3,ttbyte,$1,$1,ttuint)`'dnl
')

TTappend(tteventmask)
define(`TTdef_tteventmask',`extends(ttobj,$1)`'dnl
`'`'c_comment(`/** tteventmask: a set of ttbitmasks used to block
 * events matching certain criteria */')`'dnl
    field(ttbitmask,evtype_mask,r)`'dnl
    field(ttbitmask,evcode_mask,r)`'dnl
    field(ttbitmask,component_mask,r)`'dnl
    field(ttuint,truth_table,r)`'dnl
')
define(`TTFNdef_tteventmask',`extends(ttobj,$1)`'dnl
`'`'c_doxygen(`/** create a tteventmask with given fields */')`'dnl
`'`'exported(tteventmask (*Create)(_D ttbitmask evtype_mask, _D ttbitmask evcode_mask, _D ttbitmask component_mask),Create,$1,3,tteventmask,ttbitmask,ttbitmask,ttbitmask)`'dnl
`'`'c_doxygen(`/** set the mask of blocked event types */')`'dnl
`'`'exported(void (*SetEvtypeMask)($1 o, _D ttbitmask evtype_mask),SetEvtypeMask,$1,2,void,$1,ttbitmask)`'dnl
`'`'c_doxygen(`/** set the mask of blocked event codes */')`'dnl
`'`'exported(void (*SetEvcodeMask)($1 o, _D ttbitmask evcode_mask),SetEvcodeMask,$1,2,void,$1,ttbitmask)`'dnl
`'`'c_doxygen(`/** set the mask of blocked event components */')`'dnl
`'`'exported(void (*SetComponentMask)($1 o, _D ttbitmask component_mask),SetComponentMask,$1,2,void,$1,ttbitmask)`'dnl
`'`'c_doxygen(`/** set the truth table to combine masks of evtypes, evcodes and components of blocked events */')`'dnl
`'`'exported(void (*SetTruthTable)($1 o, ttuint truth_table),SetTruthTable,$1,2,void,$1,ttuint)`'dnl
')


TTappend(ttcallback)
define(`TTdef_ttcallback',`extends(ttobj,$1)`'dnl
`'`'c_comment(`/** ttcallback: The entry point for internal event-based callbacks from target drivers */')`'dnl
    field(ttuint,lflags,r)`'dnl
    field(ttcomponent,component,r)`'dnl
    field($1,prev,r)`'dnl
    field($1,next,r)`'dnl
')
define(`TTFNdef_ttcallback',`extends(ttobj,$1)`'dnl
    protected(ttcallback (*Create)(ttcomponent o),Create,$1)`'dnl
')

TTappend(ttlistener)
define(`TTdef_ttlistener',`extends(ttcallback,$1)`'dnl
`'`'c_comment(`/** ttlistener: A ttcallback derivative for user-set event-based callbacks */')`'dnl
    field(s_ttavl,AVL)`'dnl
    field(ttevent,event,r)`'dnl
    field(ttuint,narg_component,r)`'dnl
    field(ttuint,narg_event,r)`'dnl
    field(ttuint,nargs,r)`'dnl
    field(ttlistener_fn,function,r)`'dnl
    field(ttany *,args,r)`'dnl
    field(tteventmask,event_mask,r)`'dnl
    field(ttlistener,inprogress_prev)`'dnl
    field(ttlistener,inprogress_next)`'dnl
')
define(`TTFNdef_ttlistener',`extends(ttcallback,$1)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent with given fields */')`'dnl
`'`'exported(ttlistener (*Create)(ttcomponent o, ttuint evtype, ttuint lflags, ttlistener_fn function, ttany arg),Create,$1,5,ttlistener,ttcomponent,ttuint,ttuint,ttlistener_fn,ttany)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateA)(ttcomponent o, _D ttevent ev, ttuint lflags, ttuint narg_component, ttuint narg_event, ttuint nargs, ttlistener_fn function, _R ttany *args)`'dnl
    `'`'`'`'`'`',CreateA,$1,8,ttlistener,ttcomponent,ttevent,ttuint,ttuint,ttuint,ttuint,ttlistener_fn,_R ttany *)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateV)(ttcomponent o, _D ttevent ev, ttuint lflags, ttuint narg_component, ttuint narg_event, ttuint nargs, ttlistener_fn function, va_list *vargs)`'dnl
`'`'`'`'`'`',CreateV,$1,8,ttlistener,ttcomponent,ttevent,ttuint,ttuint,ttuint,ttuint,ttlistener_fn,va_list *)`'dnl

`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "del" ttevent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateDel)(ttcomponent o, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateDel,$1,3,ttlistener,ttcomponent,ttuint,ttlistener_fn)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "askclose" ttevent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateAskclose)(ttcomponent o, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateAskclose,$1,3,ttlistener,ttcomponent,ttuint,ttlistener_fn)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "key" ttevent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateKey)(ttcomponent o, ttuint evcode, ttuint evflags, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateKey,$1,5,ttlistener,ttcomponent,ttuint,ttuint,ttuint,ttlistener_fn)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "mouse" ttevent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateMouse)(ttcomponent o, ttuint evcode, ttuint evflags, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateMouse,$1,5,ttlistener,ttcomponent,ttuint,ttuint,ttuint,ttlistener_fn)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "activate" ttevent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateActivate)(ttcomponent o, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateActivate,$1,3,ttlistener,ttcomponent,ttuint,ttlistener_fn)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "value change" ttevent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateChange)(ttcomponent o, ttuint evcode, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateChange,$1,4,ttlistener,ttcomponent,ttuint,ttuint,ttlistener_fn)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "key_data value change" ttevent with given fields (WARNING: listener will be called with `ttdata' as argument!)*/')`'dnl
`'`'exported(ttlistener (*CreateKeyData)(ttcomponent o, TT_ARG_READ ttbyte *key, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateKeyData,$1,4,ttlistener,ttcomponent,TT_ARG_READ ttbyte *,ttuint,ttlistener_fn)`'dnl
`'`'c_doxygen(`/** create a ttlistener for a ttcomponent "expose" ttevent with given fields */')`'dnl
`'`'exported(ttlistener (*CreateExpose)(ttcomponent o, ttuint lflags, ttlistener_fn function)`'dnl
`'`'`'`'`'`',CreateExpose,$1,3,ttlistener,ttcomponent,ttuint,ttlistener_fn)`'dnl

`'`'c_doxygen(`/** add `o' to the ttcomponent `c' */')`'dnl
    public(void (*AddTo)($1 o, ttcomponent c),AddTo,$1,2,void,$1,ttcomponent)`'dnl
`'`'c_doxygen(`/** remove `o' from the ttcomponent it is attached to */')`'dnl
    public(void (*Remove)($1 o),Remove,$1,1,void,$1)`'dnl
`'`'c_doxygen(`/** set the function args of the listener `o' */')`'dnl
`'`'exported(ttbyte (*SetArgs)($1 o, ttuint lflags, ttuint nargs, _R ttany *args),SetArgs,$1,4,ttbyte,$1,ttuint,ttuint,_R ttany *)`'dnl
`'`'c_doxygen(`/** set the mask of blocked events to be used while listener `o' is being called */')`'dnl
`'`'exported(void (*SetEventMask)($1 o, _D tteventmask event_mask),SetEventMask,$1,2,void,$1,tteventmask)`'dnl
')

TTappend(tttimer)
define(`TTdef_tttimer',`extends(ttlistener,$1)`'dnl
`'`'c_comment(`/** tttimer: A ttlistener derivative for timer-based callbacks */')`'dnl
    field(time_t,t)`'dnl
    field(frac_t,f)`'dnl
    field(tttimer,timer_prev)`'dnl
    field(tttimer,timer_next)`'dnl
')
define(`TTFNdef_tttimer',`extends(ttlistener,$1)`'dnl
`'`'c_doxygen(`/** create a tttimer with given fields */')`'dnl
`'`'exported(tttimer (*CreateA)(ttcomponent r, ttuint lflags, ttuint narg_component, ttuint narg_timer, ttuint nargs, ttlistener_fn function, _R ttany *args, ttuint delay_t, ttuint delay_f)`'dnl
`'`'`'`'`'`',CreateA,$1,9,tttimer,ttcomponent,ttuint,ttuint,ttuint,ttuint,ttlistener_fn,_R ttany *,ttuint,ttuint)`'dnl
`'`'c_doxygen(`/** create a tttimer with given fields */')`'dnl
`'`'exported(tttimer (*Create)(ttcomponent r, ttuint lflags, ttlistener_fn function, ttany arg, ttuint delay_t, ttuint delay_f)`'dnl
`'`'`'`'`'`',Create,$1,6,tttimer,ttcomponent,ttuint,ttlistener_fn,ttany,ttuint,ttuint)`'dnl
`'`'c_doxygen(`/** set delay (seconds and fraction of seconds) */')`'dnl
`'`'exported(void (*SetDelay)($1 o, ttuint delay_t, ttuint delay_s),SetDelay,$1,3,void,$1,ttuint,ttuint)`'dnl
`'`'c_doxygen(`/** enable or disable tttimer `o' */')`'dnl
    public(void (*SetEnabled)($1 o, ttbyte enabled),SetEnabled,$1,2,void,$1,ttbyte)`'dnl
`'`'c_doxygen(`/** get whether tttimer `o' is enabled or disabled */')`'dnl
    public(ttbyte (*IsEnabled)(_R $1 o),IsEnabled,$1,1,ttbyte,$1)`'dnl
')

TTappend(ttcomponent)
define(`TTdef_ttcomponent',`extends(ttobj,$1)`'dnl
`'`'c_comment(`/** ttcomponent: The superclass of all components (visible objects, groups, applications, ...) */')`'dnl
    field(ttcallback,callbacks,r)`'dnl
    field(ttlistener,listeners,r)`'dnl
    field(tttimer,timers,r)`'dnl
    field(ttdata,datas,r)`'dnl
')
define(`TTFNdef_ttcomponent',`extends(ttobj,$1)`'dnl
`'`'c_doxygen(`/** add the ttlistener `c' to `o' */')`'dnl
`'`'exported(void (*AddListener)($1 o, ttlistener c),AddListener,$1,2,void,$1,ttlistener)`'dnl
`'`'c_doxygen(`/** remove the ttlistener `c' from `o' */')`'dnl
`'`'exported(void (*RemoveListener)($1 o, ttlistener c),RemoveListener,$1,2,void,$1,ttlistener)`'dnl
`'`'c_doxygen(`/** associate `data' with `key' in ttcomponent `o' */')`'dnl
`'`'exported(ttdata (*SetKeyData)($1 o, TT_ARG_READ ttbyte *key, ttany data),SetKeyData,$1,3,ttdata,$1,TT_ARG_READ ttbyte *,ttany)`'dnl
`'`'c_doxygen(`/** get `data' associated with with `key' in ttcomponent `o' */')`'dnl
`'`'exported(ttany (*GetKeyData)($1 o, TT_ARG_READ ttbyte *key),GetKeyData,$1,2,ttany,$1,TT_ARG_READ ttbyte *)`'dnl
`'`'c_doxygen(`/** remove `data' associated with `key' in ttcomponent `o' */')`'dnl
`'`'exported(void (*UnsetKeyData)($1 o, TT_ARG_READ ttbyte *key),UnsetKeyData,$1,2,void,$1,TT_ARG_READ ttbyte *)`'dnl
`'`'c_doxygen(`/** get the ttdata containing `data' associated with with `key' in ttcomponent `o' */')`'dnl
`'`'exported(ttdata (*GetData)($1 o, TT_ARG_READ ttbyte *key),GetData,$1,2,ttdata,$1,TT_ARG_READ ttbyte *)`'dnl
')

TTappend(ttdata)
define(`TTdef_ttdata',`extends(ttcomponent,$1)`'dnl
`'`'c_comment(`/**
 * ttdata: wrapper for user-defined data in ttcomponents;
 * this class is derived from ttcomponent to allow creating listeners on it,
 * but this implementation has the undesired side effect that you can
 * TT{Set,Get,Unset}KeyData_ttcomponent also on ttdatas themselves.
 */')`'dnl
    field(s_ttavl,AVL)`'dnl
    field(ttcomponent,component,r)`'dnl
    field(ttbyte *,key,r)`'dnl
    field(ttopaque,key_len,r)`'dnl
    field(ttany,data,rw)`'dnl
')
define(`TTFNdef_ttdata',`extends(ttcomponent,$1)`'dnl
dnl c_doxygen(`/** add `o' to the ttcomponent `c' */')`'dnl
    protected(void (*AddTo)($1 o, ttcomponent c),AddTo,$1,2,void,$1,ttcomponent)`'dnl
dnl c_doxygen(`/** remove `o' from the ttcomponent it is associated to */')`'dnl
    protected(void (*Remove)($1 o),Remove,$1,1,void,$1)`'dnl
')


TTappend(ttvisible)
define(`TTdef_ttvisible',`extends(ttcomponent,$1)`'dnl
`'`'c_comment(`/** ttvisible: The superclass of all visible objects */')`'dnl
    field(ttuint,vflags,r)`'dnl
    field(ttvisible,prev,r)`'dnl
    field(ttvisible,next,r)`'dnl
    field(ttvisible,parent,r)`'dnl
    field(ttvisible,child_first,r)`'dnl
    field(ttvisible,child_last,r)`'dnl
    field(tttheme,theme,r)`'dnl
    field(ttvisible_repaint_fn,repaint,r)`'dnl
')
define(`TTFNdef_ttvisible',`extends(ttcomponent,$1)`'dnl
`'`'c_doxygen(`/** add the ttvisible `o' into `parent' */')`'dnl
    public_set(void (*AddTo)($1 o, ttvisible parent),AddTo,$1,2,void,$1,ttvisible)`'dnl
`'`'c_doxygen(`/** remove the ttvisible `o' from its parent */')`'dnl
    public_set(void (*Remove)($1 o),Remove,$1,1,void,$1)`'dnl
`'`'c_doxygen(`/** invalidate ttvisible `o' internal caches, used after a theme change */')`'dnl
    public(void (*Invalidate)($1 o),Invalidate,$1,1,void,$1)`'dnl
`'`'c_doxygen(`/** set the ttvisible `o' to be visible or not */')`'dnl
    public_set(void (*SetVisible)($1 o, ttbyte on_off),SetVisible,$1,2,void,$1,ttbyte)`'dnl
`'`'c_doxygen(`/** set the tttheme `theme' of the ttvisible `o' */')`'dnl
    public_set(void (*SetTheme)($1 o, tttheme theme),SetTheme,$1,2,void,$1,tttheme)`'dnl
`'`'c_doxygen(`/** actually draw (part of) the contents of the ttvisible `o' - internally called by TTBuiltinRepaint_ttvisible */')`'dnl
    public(void (*Draw)($1 o, ttshort x, ttshort y, ttshort w, ttshort h, ttshort pitch, _R ttbyte *asciidata, _R ttfont *fontdata, _R ttattr *attrdata),Draw,$1,9,void,$1,ttshort,ttshort,ttshort,ttshort,ttshort,_R ttbyte *,_R ttfont *,_R ttattr *)`'dnl
`'`'c_doxygen(`/** internal libTT method that repaints (part of) the ttvisible `o' using its theme */')`'dnl
    public(void (*BuiltinRepaint)($1 o, ttshort x, ttshort y, ttshort w, ttshort h),BuiltinRepaint,$1,5,void,$1,ttshort,ttshort,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** change the internal libTT method used to repaint (part of) the ttvisible `o' */')`'dnl
`'`'exported(void (*SetRepaint)($1 o, ttvisible_repaint_fn repaint),SetRepaint,$1,2,void,$1,ttvisible_repaint_fn)`'dnl
`'`'c_doxygen(`/** add the ttvisible `child' into `o' */')`'dnl
`'`'exported(void (*Add)($1 o, ttvisible child),Add,$1,2,void,$1,ttvisible)`'dnl
`'`'c_doxygen(`/** request a repaint for the given part of the ttvisible `o' */')`'dnl
`'`'exported(void (*Expose)($1 o, ttshort x, ttshort y, ttshort w, ttshort h),Expose,$1,5,void,$1,ttshort,ttshort,ttshort,ttshort)`'dnl
')

TTappend(ttnative)
define(`TTdef_ttnative',`extends(ttvisible,$1)`'dnl
`'`'c_comment(`/** ttnative: class representing all server visible objects not created by us */')`'dnl
')
define(`TTFNdef_ttnative',`extends(ttvisible,$1)`'dnl
`'`'c_doxygen(`/** get the ttnative `root' object into which each top level ttvisible is added */')`'dnl
    public(ttnative (*GetRoot)(void),GetRoot,$1,0,ttnative)`'dnl
`'`'c_doxygen(`/** get `w' (width) field of given ttnative */')`'dnl
    public(ttshort (*GetW)(_R $1 o),GetW,$1,1,ttshort,$1)`'dnl
`'`'c_doxygen(`/** get `h' (height) field of given ttnative */')`'dnl
    public(ttshort (*GetH)(_R $1 o),GetH,$1,1,ttshort,$1)`'dnl
`'`'c_doxygen(`/** create a ttnative with given fields */')`'dnl
`'`'exported(ttnative (*Create)(ttany),Create,$1,1,ttnative,ttany)`'dnl
')

TTappend(ttwidget)
define(`TTdef_ttwidget',`extends(ttvisible,$1)`'dnl
`'`'c_comment(`/** ttwidget: The superclass of all window-like visible containers */')`'dnl
    field(ttshort,x,r)`'dnl
    field(ttshort,y,r)`'dnl
    field(ttshort,w,r)`'dnl
    field(ttshort,h,r)`'dnl
    field(ttint,xl,r)`'dnl
    field(ttint,yl,r)`'dnl
    field(ttint,wl,r)`'dnl
    field(ttint,hl,r)`'dnl
    field(ttcol,col)`'dnl
    field(tttooltip,tooltip,r)`'dnl
')
define(`TTFNdef_ttwidget',`extends(ttvisible,$1)`'dnl
`'`'c_doxygen(`/** set the position `x' and `y' of the ttwidget `o' */')`'dnl
    public_set(void (*SetXY)($1 o, ttshort x, ttshort y),SetXY,$1,3,void,$1,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** set the size `w' and `h' of the ttwidget `o' */')`'dnl
    public_set(void (*SetWH)($1 o, ttshort w, ttshort h),SetWH,$1,3,void,$1,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** set the inside scroll position `xl' of the ttwidget `o' */')`'dnl
    public_set(void (*SetXl)($1 o, ttint xl),SetXl,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the inside scroll position `yl' of the ttwidget `o' */')`'dnl
    public_set(void (*SetYl)($1 o, ttint yl),SetYl,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the inside scroll size `wl' of the ttwidget `o' */')`'dnl
    public_set(void (*SetWl)($1 o, ttint wl),SetWl,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the inside scroll size `hl' of the ttwidget `o' */')`'dnl
    public_set(void (*SetHl)($1 o, ttint hl),SetHl,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the the tttooltip of the ttwidget `o' */')`'dnl
    public_set(void (*SetTooltip)($1 o, tttooltip t),SetTooltip,$1,2,void,$1,tttooltip)`'dnl
`'`'c_doxygen(`/** set some (depeding on `mask') of the inside scroll position `xl' and `yl' of the ttwidget `o' */')`'dnl
`'`'exported(void (*SetXlYl)($1 o, ttuint mask, ttint xl, ttint yl),SetXlYl,$1,4,void,$1,ttbyte,ttint,ttint)`'dnl
`'`'c_doxygen(`/** set some (depeding on `mask') of the inside scroll sizes `wl' and `hl' of the ttwidget `o' */')`'dnl
`'`'exported(void (*SetWlHl)($1 o, ttuint mask, ttint wl, ttint hl),SetWlHl,$1,4,void,$1,ttbyte,ttint,ttint)`'dnl
`'`'c_doxygen(`/** set some (depeding on `mask') of the position `x' and `y' and the size `w' and `h' of the ttwidget `o' */')`'dnl
`'`'exported(void (*SetXYWH)($1 o, ttuint mask, ttshort x, ttshort y, ttshort w, ttshort h),SetXYWH,$1,6,void,$1,ttbyte,ttshort,ttshort,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** set the position `x' of the ttwidget `o' */')`'dnl
`'`'exported(void (*SetX)($1 o, ttshort x),SetX,$1,2,void,$1,ttshort)`'dnl
`'`'c_doxygen(`/** set the position `y' of the ttwidget `o' */')`'dnl
`'`'exported(void (*SetY)($1 o, ttshort y),SetY,$1,2,void,$1,ttshort)`'dnl
`'`'c_doxygen(`/** set the size `w' of the ttwidget `o' */')`'dnl
`'`'exported(void (*SetW)($1 o, ttshort w),SetW,$1,2,void,$1,ttshort)`'dnl
`'`'c_doxygen(`/** set the size `h' of the ttwidget `o' */')`'dnl
`'`'exported(void (*SetH)($1 o, ttshort h),SetH,$1,2,void,$1,ttshort)`'dnl
')

TTappend(ttlabel)
define(`TTdef_ttlabel',`extends(ttwidget,$1)`'dnl
`'`'c_comment(`/** ttlabel: A simple text label */')`'dnl
    field(ttopaque,text_len,r)`'dnl
    field(ttfont *,text,r)`'dnl
')
define(`TTFNdef_ttlabel',`extends(ttwidget,$1)`'dnl
`'`'c_doxygen(`/** set the text of the ttlabel `o' */')`'dnl
    public_set(ttbyte (*DoSetFont)($1 o, _D ttfont * text, ttopaque len),DoSetFont,$1,3,ttbyte,$1,_D ttfont *,ttopaque)`'dnl
`'`'c_doxygen(`/** set the text of the ttlabel `o' */')`'dnl
`'`'exported(ttbyte (*SetFont)($1 o, _R ttfont * font),SetFont,$1,2,ttbyte,$1,_R ttfont *)`'dnl
`'`'c_doxygen(`/** set the text of the ttlabel `o' */')`'dnl
`'`'exported(ttbyte (*SetText)($1 o, _R ttbyte * text),SetText,$1,2,ttbyte,$1,_R ttbyte *)`'dnl
`'`'c_doxygen(`/** create a ttlabel with given text */')`'dnl
`'`'exported(ttlabel (*Create)(_R ttbyte * text),Create,$1,1,ttlabel,_R ttbyte *)`'dnl
')

TTappend(tttooltip)
define(`TTdef_tttooltip',`extends(ttlabel,$1)`'dnl
`'`'c_comment(`/** tttooltip: A simple tooltip */')`'dnl
    field(ttopaque,widget_id)`'dnl
    field(ttwidget,widget,r)`'dnl
    field(ttlistener,widget_listener)`'dnl
')
define(`TTFNdef_tttooltip',`extends(ttlabel,$1)`'dnl
`'`'c_doxygen(`/** set the widget the tttooltip `o' is connected to */')`'dnl
    public_set(void (*SetWidget)($1 o, ttwidget widget),SetWidget,$1,2,void,$1,ttwidget)`'dnl
')

TTappend(ttbuttongroup)
define(`TTdef_ttbuttongroup',`extends(ttcomponent,$1)`'dnl
`'`'c_comment(`/** ttbuttongroup: a mutual-exclusion group of radiobuttons */')`'dnl
    field(ttradiobutton,group_first,r)`'dnl
    field(ttradiobutton,group_last,r)`'dnl
    field(ttradiobutton,checked,r)`'dnl
')
define(`TTFNdef_ttbuttongroup',`extends(ttcomponent,$1)`'dnl
`'`'c_doxygen(`/** add the ttradiobutton `r' to the ttbuttongroup `o' */')`'dnl
    public_set(void (*Add)(ttbuttongroup o, ttradiobutton r),Add,$1,2,void,ttbuttongroup,ttradiobutton)`'dnl
`'`'c_doxygen(`/** remove the ttradiobutton `r' from the ttbuttongroup `o' */')`'dnl
    public_set(void (*Remove)(ttbuttongroup o, ttradiobutton r),Remove,$1,2,void,ttbuttongroup,ttradiobutton)`'dnl
`'`'c_doxygen(`/** set which ttradiobutton in the ttbuttongroup `o' is checked */')`'dnl
    public_set(void (*SetChecked)($1 o, ttradiobutton r),SetChecked,$1,2,void,$1,ttradiobutton)`'dnl
')

TTappend(ttanybutton)
define(`TTdef_ttanybutton',`extends(ttwidget,$1)`'dnl
`'`'c_comment(`/** ttanybutton: the abstract class all buttons are derived from */')`'dnl
    field(ttattr *,text,r)`'dnl
    field(ttshort,text_width,r)`'dnl
    field(ttshort,text_height,r)`'dnl
`'`'dnl cheat: we define enough space for all derived objects shapes
    field(struct s_ttshape,theme_shape[ttderived_ttanybutton_shape_max])`'dnl
')
define(`TTFNdef_ttanybutton',`extends(ttwidget,$1)`'dnl
    protected(ttuint (*CacheThemeShape)($1 o),CacheThemeShape,$1,1,ttuint,$1)`'dnl
`'`'c_doxygen(`/** set the text of the ttanybutton `o' */')`'dnl
    public_set(ttbyte (*DoSetAttr)($1 o, _D ttattr * text, ttshort width, ttshort height, ttshort pitch),DoSetAttr,$1,5,ttbyte,$1,_D ttattr *,ttshort,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** set the text of the ttanybutton `o' */')`'dnl
`'`'exported(ttbyte (*SetAttr)($1 o, _R ttattr * text, ttshort width, ttshort height, ttshort pitch),SetAttr,$1,5,ttbyte,$1,_R ttattr *,ttshort,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** set the text of the ttanybutton `o' */')`'dnl
`'`'exported(ttbyte (*SetFont)($1 o, _R ttfont * text, ttshort width, ttshort height, ttshort pitch),SetFont,$1,5,ttbyte,$1,_R ttfont *,ttshort,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** set the text of the ttanybutton `o' */')`'dnl
`'`'exported(ttbyte (*SetText)($1 o, _R ttbyte * text, ttshort width, ttshort height, ttshort pitch),SetText,$1,5,ttbyte,$1,_R ttbyte *,ttshort,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** create a ttanybutton with given text */')`'dnl
`'`'exported(ttanybutton (*Create)(_R ttbyte * text, ttshort width, ttshort height, ttshort pitch),Create,$1,4,ttanybutton,_R ttbyte *,ttshort,ttshort,ttshort)`'dnl
')

TTappend(ttbutton)
define(`TTdef_ttbutton',`extends(ttanybutton,$1)`'dnl
`'`'c_comment(`/** ttbutton: a normal click-to-activate button */')`'dnl
')
define(`TTFNdef_ttbutton',`extends(ttanybutton,$1)`'dnl
`'`'c_doxygen(`/** set whether the ttbutton `o' is pressed or not */')`'dnl
    public_set(void (*SetPressed)($1 o, ttbyte pressed),SetPressed,$1,2,void,$1,ttbyte)`'dnl
`'`'c_doxygen(`/** get whether the ttbutton `o' is pressed or not */')`'dnl
`'`'exported(ttbyte (*IsPressed)(_R $1 o),IsPressed,$1,1,ttbyte,$1)`'dnl
`'`'c_doxygen(`/** create a ttbutton with given text */')`'dnl
`'`'exported(ttbutton (*Create)(_R ttbyte * text, ttshort width, ttshort height, ttshort pitch),Create,$1,4,ttbutton,_R ttbyte *,ttshort,ttshort,ttshort)`'dnl
')

TTappend(ttcheckbutton)
define(`TTdef_ttcheckbutton',`extends(ttbutton,$1)`'dnl
`'`'c_comment(`/** ttcheckbutton: a two-state (on/off) button */')`'dnl
')
define(`TTFNdef_ttcheckbutton',`extends(ttbutton,$1)`'dnl
`'`'c_doxygen(`/** set whether the ttbutton `o' is checked or not */')`'dnl
    public_set(void (*SetChecked)($1 o, ttbyte checked),SetChecked,$1,2,void,$1,ttbyte)`'dnl
`'`'c_doxygen(`/** get whether the ttbutton `o' is checked or not */')`'dnl
`'`'exported(ttbyte (*IsChecked)(_R $1 o),IsChecked,$1,1,ttbyte,$1)`'dnl
`'`'c_doxygen(`/** create a ttcheckbutton with given text */')`'dnl
`'`'exported(ttcheckbutton (*Create)(_R ttbyte * text, ttshort width, ttshort height, ttshort pitch),Create,$1,4,ttcheckbutton,_R ttbyte *,ttshort,ttshort,ttshort)`'dnl
')

TTappend(ttradiobutton)
define(`TTdef_ttradiobutton',`extends(ttcheckbutton,$1)`'dnl
`'`'c_comment(`/** ttradiobutton: a two-state mutual-exclusion button */')`'dnl
    field(ttbuttongroup,group,r)`'dnl
    field(ttradiobutton,group_prev,r)`'dnl
    field(ttradiobutton,group_next,r)`'dnl
')
define(`TTFNdef_ttradiobutton',`extends(ttcheckbutton,$1)`'dnl
`'`'c_doxygen(`/** add the ttradiobutton `o' to the ttbuttongroup `g' */')`'dnl
`'`'exported(void (*AddToGroup)(ttradiobutton o, ttbuttongroup g),AddToGroup,$1,2,void,ttradiobutton,ttbuttongroup)`'dnl
`'`'c_doxygen(`/** remove the ttradiobutton `o' from its ttbuttongroup */')`'dnl
`'`'exported(void (*RemoveFromGroup)(ttradiobutton o),RemoveFromGroup,$1,1,void,ttradiobutton)`'dnl
`'`'c_doxygen(`/** create a ttradiobutton with given text */')`'dnl
`'`'exported(ttradiobutton (*Create)(_R ttbyte * text, ttshort width, ttshort height, ttshort pitch),Create,$1,4,ttradiobutton,_R ttbyte *,ttshort,ttshort,ttshort)`'dnl
')

TTappend(ttanyscroll)
define(`TTdef_ttanyscroll',`extends(ttanybutton,$1)`'dnl
`'`'c_comment(`/** ttanyscroll: the abstract class all scroll-like widgets are derived from */')`'dnl
    field(ttbyte,orientation,r)`'dnl
    field(ttint,size,r)`'dnl
    field(ttint,real_size,r)`'dnl
    field(ttint,view_size,r)`'dnl
    field(ttint,real_view_size)`'dnl
    field(ttint,position,r)`'dnl
    field(ttint,real_position,r)`'dnl
    field(ttuint,state)`'dnl
')
define(`TTFNdef_ttanyscroll',`extends(ttanybutton,$1)`'dnl
    protected(void (*Recalculate)($1 o, ttint size, ttint real_size, ttint view_size, ttint position)`'dnl
`'`'`'`'`'`'`',Recalculate,$1,5,void,$1,ttint,ttint,ttint,ttint)`'dnl
    protected(void (*SetState)($1 o, ttuint state),SetState,$1,2,void,$1,ttuint)`'dnl
`'`'c_doxygen(`/** set the orientation of the ttanyscroll `o' */')`'dnl
    public_set(void (*SetOrientation)($1 o, ttbyte orientation),SetOrientation,$1,2,void,$1,ttbyte)`'dnl
`'`'c_doxygen(`/** set the (virtual) size of the ttanyscroll `o' */')`'dnl
    public_set(void (*SetSize)($1 o, ttint size),SetSize,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the size of the ttanyscroll `o' */')`'dnl
    public_set(void (*SetRealSize)($1 o, ttint real_size),SetRealSize,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the (virtual) view size of the ttanyscroll `o' */')`'dnl
    public_set(void (*SetViewSize)($1 o, ttint view_size),SetViewSize,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the (virtual) position of the ttanyscroll `o' */')`'dnl
    public_set(void (*SetPosition)($1 o, ttint position),SetPosition,$1,2,void,$1,ttint)`'dnl
')

TTappend(ttscrollbar)
define(`TTdef_ttscrollbar',`extends(ttanyscroll,$1)`'dnl
`'`'c_comment(`/** ttscrollbar: a normal, interactive scroll bar */')`'dnl
    field(ttscrollpane,scrollpane)`'dnl
')
define(`TTFNdef_ttscrollbar',`extends(ttanyscroll,$1)`'dnl
`'`'c_doxygen(`/** create a ttscrollbar with given fields */')`'dnl
`'`'exported(ttscrollbar (*Create1)(ttbyte orientation),Create1,$1,1,ttscrollbar,ttbyte)`'dnl
`'`'c_doxygen(`/** create a ttscrollbar with given fields */')`'dnl
`'`'exported(ttscrollbar (*Create4)(ttbyte orientation, ttint size, ttint real_size, ttint view_size)`'dnl
`'`'`'`'`'`',Create4,$1,4,ttscrollbar,ttbyte,ttint,ttint,ttint)`'dnl
')

TTappend(ttslider)
define(`TTdef_ttslider',`extends(ttanyscroll,$1)`'dnl
`'`'c_comment(`/** ttslider: a sliding knob within a bounded interval */')`'dnl
    field(ttint,slide_min,r)`'dnl
    field(ttint,slide_max,r)`'dnl
    field(ttint,slide_value,r)`'dnl
')
define(`TTFNdef_ttslider',`extends(ttanyscroll,$1)`'dnl
`'`'c_doxygen(`/** set the slide minimum of the ttslider `o' */')`'dnl
    public_set(void (*SetSlideMin)($1 o, ttint slide_min),SetSlideMin,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the slide maximum of the ttslider `o' */')`'dnl
    public_set(void (*SetSlideMax)($1 o, ttint slide_max),SetSlideMax,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** set the slide position of the ttslider `o' */')`'dnl
    public_set(void (*SetSlideValue)($1 o, ttint slide_value),SetSlideValue,$1,2,void,$1,ttint)`'dnl
`'`'c_doxygen(`/** create a ttslider with given fields */')`'dnl
`'`'exported(ttslider (*Create)(ttbyte orientation, ttint real_size),Create,$1,2,ttslider,ttbyte,ttint)`'dnl
')

TTappend(ttprogressbar)
define(`TTdef_ttprogressbar',`extends(ttanyscroll,$1)`'dnl
`'`'c_comment(`/** ttprogressbar: a percentage completion bar */')`'dnl
    field(ttint,real_position_frac_above)`'dnl
    field(ttint,real_position_frac_below)`'dnl
')
define(`TTFNdef_ttprogressbar',`extends(ttanyscroll,$1)`'dnl
`'`'c_doxygen(`/** create a ttprogressbar with given fields */')`'dnl
`'`'exported(ttprogressbar (*Create)(ttbyte orientation),Create,$1,1,ttprogressbar,ttbyte)`'dnl
')

TTappend(ttscrollpane)
define(`TTdef_ttscrollpane',`extends(ttwidget,$1)`'dnl
`'`'c_comment(`/** ttscrollpane: a scrollable widget;
 * it keeps track of its wl and hl
 * from the ttwidgets you put inside it;
 * also used as the scrollpane of a ttscroller.
 */')`'dnl
    field(ttscrollbar,bar_x,r)`'dnl
    field(ttscrollbar,bar_y,r)`'dnl
')
define(`TTFNdef_ttscrollpane',`extends(ttwidget,$1)`'dnl
`'`'c_doxygen(`/** create a ttscrollpane with given size */')`'dnl
`'`'exported(ttscrollpane (*Create)(ttshort w, ttshort h),Create,$1,2,ttscrollpane,ttshort,ttshort)`'dnl
`'`'c_doxygen(`/** set the x scrollbar the ttscrollpane `o' is connected to */')`'dnl
    public_set(void (*SetBarX)($1 o, ttscrollbar bar_x),SetBarX,$1,2,void,$1,ttscrollbar)`'dnl
`'`'c_doxygen(`/** set the y scrollbar the ttscrollpane `o' is connected to */')`'dnl
    public_set(void (*SetBarY)($1 o, ttscrollbar bar_y),SetBarY,$1,2,void,$1,ttscrollbar)`'dnl
')

TTappend(ttwindow)
define(`TTdef_ttwindow',`extends(ttwidget,$1)`'dnl
`'`'c_comment(`/** ttwindow: a full-featured window */')`'dnl
    field(ttopaque,title_len,r)`'dnl
    field(ttbyte *,title,r)`'dnl
')
define(`TTFNdef_ttwindow',`extends(ttwidget,$1)`'dnl
`'`'c_doxygen(`/** set the title of the ttwindow `o' */')`'dnl
    public_set(ttbyte (*SetTitle)($1 o, TT_ARG_READ ttbyte *title),SetTitle,$1,2,ttbyte,$1,TT_ARG_READ ttbyte *)`'dnl
')

TTappend(ttframe)
define(`TTdef_ttframe',`extends(ttwindow,$1)`'dnl
`'`'c_comment(`/** ttframe: a toplevel window */')`'dnl
    field(ttmenubar,menubar,r)`'dnl
')
define(`TTFNdef_ttframe',`extends(ttwindow,$1)`'dnl
`'`'c_doxygen(`/** set the menubar of the ttframe `o' */')`'dnl
    public_set(void (*SetMenubar)($1 o, ttmenubar m),SetMenubar,$1,2,void,$1,ttmenubar)`'dnl
`'`'c_doxygen(`/** create a ttframe with given title */')`'dnl
`'`'exported(ttframe (*Create)(_R ttbyte *title),Create,$1,1,ttframe,_R ttbyte *)`'dnl
')

TTappend(ttscroller)
define(`TTdef_ttscroller',`extends(ttwindow,$1)`'dnl
`'`'c_comment(`/** ttscroller: a scrollable container;
 * you can put any ttwidget inside its scrollpane
 */')`'dnl
    field(ttscrollpane,scrollpane,r)`'dnl
')
define(`TTFNdef_ttscroller',`extends(ttwindow,$1)`'dnl
`'`'c_doxygen(`/** create a ttscroller with given size */')`'dnl
`'`'exported(ttscroller (*Create)(ttshort w, ttshort h),Create,$1,2,ttscroller,ttshort,ttshort)`'dnl
')

TTappend(ttmenuitem)
define(`TTdef_ttmenuitem',`extends(ttvisible,$1)`'dnl
`'`'c_comment(`/** ttmenuitem: a simple line in a menu */')`'dnl
    field(ttbyte *,name,r)`'dnl
')
define(`TTFNdef_ttmenuitem',`extends(ttvisible,$1)`'dnl
')

TTappend(ttcheckmenuitem)
define(`TTdef_ttcheckmenuitem',`extends(ttmenuitem,$1)`'dnl
`'`'c_comment(`/** ttcheckmenuitem: a checkable line in a menu */')`'dnl
')
define(`TTFNdef_ttcheckmenuitem',`extends(ttmenuitem,$1)`'dnl
')

TTappend(ttradiomenuitem)
define(`TTdef_ttradiomenuitem',`extends(ttcheckmenuitem,$1)`'dnl
`'`'c_comment(`/** ttradiomenuitem: a radio (mutual-exclusion) line in a menu */')`'dnl
')
define(`TTFNdef_ttradiomenuitem',`extends(ttcheckmenuitem,$1)`'dnl
')

TTappend(ttmenu)
define(`TTdef_ttmenu',`extends(ttmenuitem,$1)
`'`'c_comment(`/** ttmenu: a line in a menu pointing to a sub menu */')`'dnl
    field(ttmenubar,menubar,r)`'dnl
')
define(`TTFNdef_ttmenu',`extends(ttmenuitem,$1)`'dnl
')

TTappend(ttmenubar)
define(`TTdef_ttmenubar',`extends(ttvisible,$1)`'dnl
`'`'c_comment(`/** ttmenubar: a complete menu bar */')`'dnl
')
define(`TTFNdef_ttmenubar',`extends(ttvisible,$1)`'dnl
`'`'c_doxygen(`/** get the default ttmenubar used by ttwidget:s */')`'dnl
`'`'exported(ttmenubar (*GetDefault)(void),GetDefault,$1,0,ttmenubar)`'dnl
')

TTappend(ttanytext)
define(`TTdef_ttanytext',`extends(ttwindow,$1)`'dnl
`'`'c_comment(`/** ttanytext: the superclass of all text-only widgets */')`'dnl
    field(ttopaque,text_len,r)`'dnl
    field(ttattr *,text,r)`'dnl
')
define(`TTFNdef_ttanytext',`extends(ttwindow,$1)`'dnl
')

TTappend(tttextfield)
define(`TTdef_tttextfield',`extends(ttanytext,$1)`'dnl
`'`'c_comment(`/** tttextfield: a single line user editable text-only widget */')`'dnl
')
define(`TTFNdef_tttextfield',`extends(ttanytext,$1)`'dnl
')

TTappend(tttextarea)
define(`TTdef_tttextarea',`extends(tttextfield,$1)`'dnl
`'`'c_comment(`/** tttextarea: a multi line user editable text-only widget */')`'dnl
')
define(`TTFNdef_tttextarea',`extends(tttextfield,$1)`'dnl
')

TTappend(tttheme)
define(`TTdef_tttheme',`extends(ttcomponent,$1)
`'`'c_comment(`/** tttheme: the look-n-feel of the application */')`'dnl
    field(ttbyte *,name,r)`'dnl
    field(ttfont,fill)`'dnl
    field(ttcol,bg[tttheme_bg_max])`'dnl
    field(ttint,val[tttheme_val_max])`'dnl
    field(struct s_ttshape,shape[tttheme_shape_max][2])`'dnl
')
define(`TTFNdef_tttheme',`extends(ttcomponent,$1)`'dnl
`'`'c_doxygen(`/** get the default tttheme used by ttvisible:s */')`'dnl
`'`'exported(tttheme (*GetDefault)(void),GetDefault,$1,0,tttheme)`'dnl
')

TTappend(ttapplication)
define(`TTdef_ttapplication',`extends(ttcomponent,$1)`'dnl
`'`'c_comment(`/** ttapplication: the topmost object */')`'dnl
    field(ttbyte *,name,r)`'dnl
')
define(`TTFNdef_ttapplication',`extends(ttcomponent,$1)`'dnl
`'`'c_doxygen(`/** create (only one allowed) a ttapplication with given name */')`'dnl
`'`'exported(ttapplication (*Set)(_R ttbyte * name),Set,$1,1,ttapplication,_R ttbyte *)`'dnl
`'`'c_doxygen(`/** get the current application */')`'dnl
`'`'exported(ttapplication (*Get)(void),Get,$1,0,ttapplication)`'dnl
')



dnl defines for objects hierarchy
define(`m4super_ttobj', `ttobj')

define(`extends',`define(`m4super_$2',`$1')`'dnl
')
define(`field',`')
define(`el',`TTdef_$1($1)`'dnl
')
TTlist()

define(`field')
define(`extends')
define(`protected')
define(`public')
define(`public_set')
define(`exported')

undefine(`TTappend')
undefine(`el')

divert

