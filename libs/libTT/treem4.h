
/* This file was automatically generated from m4/tree.m4, do not edit! */


/*
 *  treem4.h  --  internal header for libTT objects hierarchy tree
 */

#ifndef _TT_TREEM4_H
#define _TT_TREEM4_H












                             




















#define TT_LIST(el) \
el(ttobj)  el(ttevent) el(tteventbig) el(ttlistener) el(ttcallback) el(ttcomponent) el(ttvisible) el(ttnative) el(ttwidget) el(ttlabel) el(ttanybutton) el(ttbutton) el(ttcheckbutton) el(ttradiobutton) el(ttscrollbar) el(ttbuttongroup) el(ttwindow) el(ttframe) el(ttscroller) el(ttmenuitem) el(ttcheckmenuitem) el(ttradiomenuitem) el(ttmenu) el(ttmenubar) el(ttanytext) el(tttextfield) el(tttextarea) el(tttheme) el(ttapplication)

#define TT_NLIST(el) \
 el(ttevent) el(tteventbig) el(ttlistener) el(ttcallback) el(ttcomponent) el(ttvisible) el(ttnative) el(ttwidget) el(ttlabel) el(ttanybutton) el(ttbutton) el(ttcheckbutton) el(ttradiobutton) el(ttscrollbar) el(ttbuttongroup) el(ttwindow) el(ttframe) el(ttscroller) el(ttmenuitem) el(ttcheckmenuitem) el(ttradiomenuitem) el(ttmenu) el(ttmenubar) el(ttanytext) el(tttextfield) el(tttextarea) el(tttheme) el(ttapplication)

#define super_(obj)	TT_CAT(super_,obj)
#define order_(obj)	TT_CAT(order_,obj)
#define magicmask_(obj)	TT_CAT(magicmask_,obj)
#define magic_(obj)	TT_CAT(magic_,obj)



/*
 * NOTE:
 *
 * magicmask_* and magic_* are autogenerated using a quite intricated m4 algorythm.
 *
 * the final effect is shown below, on a cutdown hierarchy tree.
 * in the picture, first number is magic_*, second is magicmask_*
 *
 *                         ________ttobj
 *                ________/   ____/(0,0)
 *       ________/       ____/       |
 *      /               /            |
 *ttlistener     ttevent        ttcomponent
 *(0x1,0x3)     (0x2,0x3)     ___(0x3,0x3)___
 *                      _____/    /     \    \_____
 *                _____/         /       \         \_____
 *               /              /         \              \
 *           _ttvisible_   ttbuttongroup   tttheme   ttapplication
 *          /(0x7,0x1F)\\__  (0xB,0x1F)   (0xF,0x1F)  (0x13,0x1F)
 *         /    |       \  \_________
 *        /     |        \           \
 * ttnative   ttwidget   ttmenuitem   ttmenubar
 *(0x27,0xFF)(0x47,0xFF) (0x67,0xFF) (0x87,0xFF)
 *
 * magic_* of a children is the parent's one, plus the progressive number
 * (conveniently shifted) of the children in the parent's children list.
 *
 * as you can see, all children of the same parent share the same magicmask;
 * this magicmask is the smallest bit mask that can hold all children magic_* numbers.
 * in other words, the tree is Huffman coded (node frequencies do not apply in this case)
 *
 * with this setup, runtime type checking and casting is extremely simple:
 * to check if an object of type A can be cast to type B, just do:
 *
 *  if ((magic_A & magicmask_B) == magic_B) {
 *      success;
 *  } else {
 *      fail;
 *  }
 * 
 */

/* set order_xxx enums */
typedef enum e_order_ttobj {
    order_ttobj = 1,
#define el(o) order_(o),
TT_NLIST(el)
#undef el
    order_n
} e_order_ttobj;


/* set magicmask_xxx enums */
typedef enum e_magicmask_ttobj {
    magicmask_ttobj = 0, 
    magicmask_ttevent = 0x3, 
    magicmask_tteventbig = 0x7, 
    magicmask_ttlistener = 0x3, 
    magicmask_ttcallback = 0x7, 
    magicmask_ttcomponent = 0x3, 
    magicmask_ttvisible = 0x1f, 
    magicmask_ttnative = 0xff, 
    magicmask_ttwidget = 0xff, 
    magicmask_ttlabel = 0x3ff, 
    magicmask_ttanybutton = 0x3ff, 
    magicmask_ttbutton = 0xfff, 
    magicmask_ttcheckbutton = 0x1fff, 
    magicmask_ttradiobutton = 0x3fff, 
    magicmask_ttscrollbar = 0xfff, 
    magicmask_ttbuttongroup = 0x1f, 
    magicmask_ttwindow = 0x3ff, 
    magicmask_ttframe = 0xfff, 
    magicmask_ttscroller = 0xfff, 
    magicmask_ttmenuitem = 0xff, 
    magicmask_ttcheckmenuitem = 0x3ff, 
    magicmask_ttradiomenuitem = 0x7ff, 
    magicmask_ttmenu = 0x3ff, 
    magicmask_ttmenubar = 0xff, 
    magicmask_ttanytext = 0xfff, 
    magicmask_tttextfield = 0x1fff, 
    magicmask_tttextarea = 0x3fff, 
    magicmask_tttheme = 0x1f, 
    magicmask_ttapplication = 0x1f,
    magicmask_last
} e_magicmask_ttobj;


typedef enum e_magic_ttobj {
    magic_ttobj = 0,

 
    magic_ttevent = 0x1, 
    magic_tteventbig = 0x5, 
    magic_ttlistener = 0x2, 
    magic_ttcallback = 0x6, 
    magic_ttcomponent = 0x3, 
    magic_ttvisible = 0x7, 
    magic_ttnative = 0x27, 
    magic_ttwidget = 0x47, 
    magic_ttlabel = 0x147, 
    magic_ttanybutton = 0x247, 
    magic_ttbutton = 0x647, 
    magic_ttcheckbutton = 0x1647, 
    magic_ttradiobutton = 0x3647, 
    magic_ttscrollbar = 0xa47, 
    magic_ttbuttongroup = 0xb, 
    magic_ttwindow = 0x347, 
    magic_ttframe = 0x747, 
    magic_ttscroller = 0xb47, 
    magic_ttmenuitem = 0x67, 
    magic_ttcheckmenuitem = 0x167, 
    magic_ttradiomenuitem = 0x567, 
    magic_ttmenu = 0x267, 
    magic_ttmenubar = 0x87, 
    magic_ttanytext = 0xf47, 
    magic_tttextfield = 0x1f47, 
    magic_tttextarea = 0x3f47, 
    magic_tttheme = 0xf, 
    magic_ttapplication = 0x13,

    magic_last
} e_magic_ttobj;


/* #define IS(xxx,o) macros */
#define IS(obj,o) (((o)->FN->magic & magicmask_(obj)) == magic_(obj))







typedef enum e_value_ttobj {


    ttobj_not_a_value = order_ttobj << 16,         
    ttobj_id,    
    ttobj_refcount,    
    ttobj_oflags,            
    ttobj_user_data,    
    ttobj_events_inprogress,  

    ttevent_not_a_value = order_ttevent << 16,         
    ttevent_callback,    
    ttevent_component,    
    ttevent_evtype,    
    ttevent_evcode,    
    ttevent_evflags,     

    tteventbig_not_a_value = order_tteventbig << 16,         
    tteventbig_x,    
    tteventbig_y,    
    tteventbig_w,    
    tteventbig_h,    
    tteventbig_len,    
    tteventbig_data, 

    ttlistener_not_a_value = order_ttlistener << 16,         
    ttlistener_lflags,    
    ttlistener_component,    
    ttlistener_prev,    
    ttlistener_next, 

    ttcallback_not_a_value = order_ttcallback << 16,     
    ttcallback_avl_left,    
    ttcallback_avl_right,    
    ttcallback_avl_parent,            
    ttcallback_event,    
    ttcallback_narg_component,    
    ttcallback_narg_event,    
    ttcallback_nargs,    
    ttcallback_function,        
    ttcallback_args, 

    ttcomponent_not_a_value = order_ttcomponent << 16,         
    ttcomponent_listeners,    
    ttcomponent_callbacks, 

    ttvisible_not_a_value = order_ttvisible << 16,         
    ttvisible_vflags,    
    ttvisible_prev,    
    ttvisible_next,    
    ttvisible_parent,    
    ttvisible_child_first,    
    ttvisible_child_last,    
    ttvisible_theme,    
    ttvisible_repaint, 

    ttnative_not_a_value = order_ttnative << 16,      

    ttwidget_not_a_value = order_ttwidget << 16,         
    ttwidget_x,    
    ttwidget_y,    
    ttwidget_w,    
    ttwidget_h, 

    ttlabel_not_a_value = order_ttlabel << 16,         
    ttlabel_text_len,        
    ttlabel_text, 

    ttanybutton_not_a_value = order_ttanybutton << 16,             
    ttanybutton_text_width,    
    ttanybutton_text_height,        
    ttanybutton_text, 

    ttbutton_not_a_value = order_ttbutton << 16,      

    ttcheckbutton_not_a_value = order_ttcheckbutton << 16,      

    ttradiobutton_not_a_value = order_ttradiobutton << 16,      

    ttscrollbar_not_a_value = order_ttscrollbar << 16,      

    ttbuttongroup_not_a_value = order_ttbuttongroup << 16,      

    ttwindow_not_a_value = order_ttwindow << 16,          

    ttframe_not_a_value = order_ttframe << 16,      

    ttscroller_not_a_value = order_ttscroller << 16,         
    ttscroller_scrollx,    
    ttscroller_scrolly, 

    ttmenuitem_not_a_value = order_ttmenuitem << 16,          

    ttcheckmenuitem_not_a_value = order_ttcheckmenuitem << 16,      

    ttradiomenuitem_not_a_value = order_ttradiomenuitem << 16,      

    ttmenu_not_a_value = order_ttmenu << 16,     
    
    ttmenu_menubar, 

    ttmenubar_not_a_value = order_ttmenubar << 16,      

    ttanytext_not_a_value = order_ttanytext << 16,         
    ttanytext_text_len,        
    ttanytext_text, 

    tttextfield_not_a_value = order_tttextfield << 16,      

    tttextarea_not_a_value = order_tttextarea << 16,      

    tttheme_not_a_value = order_tttheme << 16,     
            
        
    tttheme_name, 

    ttapplication_not_a_value = order_ttapplication << 16,         
    value_last
} e_value_ttobj;



#endif /* _TT_TREEM4_H */

