



/* This file was automatically generated from m4/socket1.m4, do not edit! */





























/*
 *  m4/m4_sockproto.m4 --  macroized prototypes for libTw functions.
 *                   used as template for a lot of autogenerated files.
 *
 *                   the prototypes are used both on client and server side
 *                   to implement function calls <-> socket data stream
 *                   conversion.
 *                   You can also see this as a custom version of
 *                   remote procedure calling.
 *
 *  Copyright (C) 1999-2001 by Massimiliano Ghilardi
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 */

/*

 format of this file: each non-empty line is of the form
 
 PROTO(<rettype>,<retflag>, <action>,<object>,<self>, <arg1type>,<arg1flag>, ...)

 the number of arguments the function wants must be deduced
 from the number of formal args in each PROTO(...) definition.

 <flag> : v = void
	  _ = scalar (any integer)
	  x = pointer
	  V(len) = vector of <len> elements
		<len> can be an expression, and may access the other arguments
		of the function as A(n) where <n> is the progressive number
		of the argument: A(1) is the first arg, A(2) the second, ...
	  W(len) = vector of <len> elements, with double-checking/autodetect on len
		so that you can safely pass NULL instead of the vector.

 Function calls wait until server has processed the command and returned the result
 if their return value is not void.
 
 <action> : the function name (Create, Map, Delete, ...)
 <object> : the object it acts upon (Gadget, Window, ...)
 
 <self> : 0 if the server implementation does not need the Fn##object method pointer
	: 1 if the function in the server needs the Fn##object method pointer
	: 2 if the Fn##object method pointer is extracted from the first argument
	

*/

#define OK_MAGIC	((uldat)0x3E4B4F3Cul)
#define FAIL_MAGIC	((uldat)0xFFFFFFFFul)

#define FIND_MAGIC		((uldat)0x646E6946ul) /* i.e. "Find" */
#define MSG_MAGIC		((uldat)0x2167734dul) /* i.e. "Msg!" */

case order_FindFunction:
    a[0]._ = (uldat)FindFunction((byte)a[1]._, (byte CONST *)a[2].V, (byte)a[3]._, (byte CONST *)a[4].V);
    break;


case order_SyncSocket:
    a[0]._ = (uldat)SyncSocket();
    break;


case order_ServerSizeof:
    a[0]._ = (uldat)ServerSizeof((byte)a[1]._);
    break;


case order_CanCompress:
    a[0]._ = (uldat)CanCompress();
    break;

case order_DoCompress:
    a[0]._ = (uldat)DoCompress((byte)a[1]._);
    break;


case order_NeedResizeDisplay:
    NeedResizeDisplay();
    break;


case order_AttachHW:
    AttachHW((uldat)a[1]._, (byte CONST *)a[2].V, (byte)a[3]._);
    break;

case order_DetachHW:
    a[0]._ = (uldat)DetachHW((uldat)a[1]._, (byte CONST *)a[2].V);
    break;


case order_SetFontTranslation:
    SetFontTranslation((byte CONST *)a[1].V);
    break;

case order_SetUniFontTranslation:
    SetUniFontTranslation((hwfont CONST *)a[1].V);
    break;


case order_DeleteObj:
    DeleteObj((obj)a[1].x);
    break;

case order_ChangeFieldObj:
    Act(ChangeField,(obj)a[1].x)((obj)a[1].x, (udat)a[2]._, (uldat)a[3]._, (uldat)a[4]._);
    break;


case order_CreateWidget:
    a[0].x = (obj)CreateWidget((dat)a[1]._, (dat)a[2]._, (uldat)a[3]._, (uldat)a[4]._, (dat)a[5]._, (dat)a[6]._, (hwattr)a[7]._);
    break;

case order_RecursiveDeleteWidget:
    RecursiveDeleteWidget((widget)a[1].x);
    break;
 /* it is wrapped in socket.c */
case order_MapWidget:
    Act(Map,(widget)a[1].x)((widget)a[1].x, (widget)a[2].x);
    break;

case order_UnMapWidget:
    Act(UnMap,(widget)a[1].x)((widget)a[1].x);
    break;

case order_SetXYWidget:
    SetXYWidget((widget)a[1].x, (dat)a[2]._, (dat)a[3]._);
    break;

case order_GetOwnerWidget:
    a[0].x = (obj)GetOwnerWidget((widget)a[1].x);
    break;

case order_ExposeWidget:
    ExposeWidget((widget)a[1].x, (dat)a[2]._, (dat)a[3]._, (dat)a[4]._, (dat)a[5]._, (byte CONST *)a[6].V, (hwfont CONST *)a[7].V, (hwattr CONST *)a[8].V);
    break;

				    

case order_CreateGadget:
    a[0].x = (obj)CreateGadget((widget)a[1].x, (dat)a[2]._, (dat)a[3]._, (byte CONST *)a[4].V, (uldat)a[5]._, (uldat)a[6]._, (udat)a[7]._, (hwcol)a[8]._, (hwcol)a[9]._, (hwcol)a[10]._, (hwcol)a[11]._, (dat)a[12]._, (dat)a[13]._);
    break;


case order_CreateButtonGadget:
    a[0].x = (obj)Do(CreateButton,Gadget)(FnGadget, (widget)a[1].x, (dat)a[2]._, (dat)a[3]._, (byte CONST *)a[4].V, (uldat)a[5]._, (udat)a[6]._, (hwcol)a[7]._, (hwcol)a[8]._, (hwcol)a[9]._, (dat)a[10]._, (dat)a[11]._);
    break;


case order_WriteTextsGadget:
    Act(WriteTexts,(gadget)a[1].x)((gadget)a[1].x, (byte)a[2]._, (dat)a[3]._, (dat)a[4]._, (byte CONST *)a[5].V, (dat)a[6]._, (dat)a[7]._);
    break;

case order_WriteHWFontsGadget:
    Act(WriteHWFonts,(gadget)a[1].x)((gadget)a[1].x, (byte)a[2]._, (dat)a[3]._, (dat)a[4]._, (hwfont CONST *)a[5].V, (dat)a[6]._, (dat)a[7]._);
    break;


									
case order_Create4MenuRow:
    Create4MenuRow((window)a[1].x, (udat)a[2]._, (byte)a[3]._, (uldat)a[4]._, (byte CONST *)a[5].V);
    break;


case order_CreateWindow:
    a[0].x = (obj)Do(Create,Window)(FnWindow, (dat)a[1]._, (byte CONST *)a[2].V, (hwcol CONST *)a[3].V, (menu)a[4].x, (hwcol)a[5]._, (uldat)a[6]._, (uldat)a[7]._, (uldat)a[8]._, (dat)a[9]._, (dat)a[10]._, (dat)a[11]._);
    break;

case order_Create4MenuWindow:
    a[0].x = (obj)Do(Create4Menu,Window)(FnWindow, (menu)a[1].x);
    break;

case order_WriteAsciiWindow:
    Act(WriteAscii,(window)a[1].x)((window)a[1].x, (ldat)a[2]._, (byte CONST *)a[3].V);
    break;

case order_WriteStringWindow:
    Act(WriteString,(window)a[1].x)((window)a[1].x, (ldat)a[2]._, (byte CONST *)a[3].V);
    break;

case order_WriteHWFontWindow:
    Act(WriteHWFont,(window)a[1].x)((window)a[1].x, (ldat)a[2]._, (hwfont CONST *)a[3].V);
    break;

case order_WriteHWAttrWindow:
    Act(WriteHWAttr,(window)a[1].x)((window)a[1].x, (dat)a[2]._, (dat)a[3]._, (ldat)a[4]._, (hwattr CONST *)a[5].V);
    break;

case order_WriteRowWindow:
    Act(WriteRow,(window)a[1].x)((window)a[1].x, (ldat)a[2]._, (byte CONST *)a[3].V);
    break;


case order_GotoXYWindow:
    Act(GotoXY,(window)a[1].x)((window)a[1].x, (ldat)a[2]._, (ldat)a[3]._);
    break;

case order_SetColTextWindow:
    Act(SetColText,(window)a[1].x)((window)a[1].x, (hwcol)a[2]._);
    break;

case order_SetColorsWindow:
    Act(SetColors,(window)a[1].x)((window)a[1].x, (udat)a[2]._, (hwcol)a[3]._, (hwcol)a[4]._, (hwcol)a[5]._, (hwcol)a[6]._, (hwcol)a[7]._, (hwcol)a[8]._, (hwcol)a[9]._, (hwcol)a[10]._, (hwcol)a[11]._);
    break;

case order_ConfigureWindow:
    Act(Configure,(window)a[1].x)((window)a[1].x, (byte)a[2]._, (dat)a[3]._, (dat)a[4]._, (dat)a[5]._, (dat)a[6]._, (dat)a[7]._, (dat)a[8]._);
    break;

case order_ResizeWindow:
    ResizeWindow((window)a[1].x, (dat)a[2]._, (dat)a[3]._);
    break;


case order_FindWidgetAtWidget:
    a[0].x = (obj)Act(FindWidgetAt,(widget)a[1].x)((widget)a[1].x, (dat)a[2]._, (dat)a[3]._);
    break;

case order_FocusSubWidget:
    FocusSubWidget((widget)a[1].x);
    break;


case order_CreateGroup:
    a[0].x = (obj)CreateGroup();
    break;

case order_InsertGadgetGroup:
    Act(InsertGadget,(group)a[1].x)((group)a[1].x, (gadget)a[2].x);
    break;

case order_RemoveGadgetGroup:
    Act(RemoveGadget,(group)a[1].x)((group)a[1].x, (gadget)a[2].x);
    break;


case order_GetSelectedGadgetGroup:
    a[0].x = (obj)Act(GetSelectedGadget,(group)a[1].x)((group)a[1].x);
    break;

case order_SetSelectedGadgetGroup:
    Act(SetSelectedGadget,(group)a[1].x)((group)a[1].x, (gadget)a[2].x);
    break;


case order_Create4MenuMenuItem:
    a[0].x = (obj)Create4MenuMenuItem((obj)a[1].x, (window)a[2].x, (byte)a[3]._, (dat)a[4]._, (byte CONST *)a[5].V);
    break;

case order_Create4MenuCommonMenuItem:
    a[0]._ = (uldat)Do(Create4MenuCommon,MenuItem)(FnMenuItem, (menu)a[1].x);
    break;


case order_CreateMenu:
    a[0].x = (obj)CreateMenu((hwcol)a[1]._, (hwcol)a[2]._, (hwcol)a[3]._, (hwcol)a[4]._, (hwcol)a[5]._, (hwcol)a[6]._, (byte)a[7]._);
    break;

case order_SetInfoMenu:
    Act(SetInfo,(menu)a[1].x)((menu)a[1].x, (byte)a[2]._, (ldat)a[3]._, (byte CONST *)a[4].V, (hwcol CONST *)a[5].V);
    break;


case order_CreateMsgPort:
    a[0].x = (obj)CreateMsgPort((byte)a[1]._, (byte CONST *)a[2].V, (time_t)a[3]._, (frac_t)a[4]._, (byte)a[5]._);
    break;

case order_FindMsgPort:
    a[0].x = (obj)FindMsgPort((msgport)a[1].x, (byte)a[2]._, (byte CONST *)a[3].V);
    break;


case order_BgImageScreen:
    Act(BgImage,(screen)a[1].x)((screen)a[1].x, (dat)a[2]._, (dat)a[3]._, (hwattr CONST *)a[4].V);
    break;


case order_PrevObj:
    a[0].x = (obj)PrevObj((obj)a[1].x);
    break;

case order_NextObj:
    a[0].x = (obj)NextObj((obj)a[1].x);
    break;

case order_ParentObj:
    a[0].x = (obj)ParentObj((obj)a[1].x);
    break;


case order_G_PrevGadget:
    a[0].x = (obj)G_PrevGadget((gadget )a[1].x);
    break;

case order_G_NextGadget:
    a[0].x = (obj)G_NextGadget((gadget )a[1].x);
    break;

case order_GroupGadget:
    a[0].x = (obj)GroupGadget((gadget )a[1].x);
    break;


case order_O_PrevWidget:
    a[0].x = (obj)O_PrevWidget((widget )a[1].x);
    break;

case order_O_NextWidget:
    a[0].x = (obj)O_NextWidget((widget )a[1].x);
    break;

case order_OwnerWidget:
    a[0].x = (obj)OwnerWidget((widget )a[1].x);
    break;


case order_FirstScreen:
    a[0].x = (obj)FirstScreen();
    break;

case order_FirstWidget:
    a[0].x = (obj)FirstWidget((widget )a[1].x);
    break;

case order_FirstMsgPort:
    a[0].x = (obj)FirstMsgPort();
    break;

case order_FirstMenu:
    a[0].x = (obj)FirstMenu((msgport)a[1].x);
    break;

case order_FirstW:
    a[0].x = (obj)FirstW((msgport)a[1].x);
    break;

case order_FirstGroup:
    a[0].x = (obj)FirstGroup((msgport)a[1].x);
    break;

case order_FirstMutex:
    a[0].x = (obj)FirstMutex((msgport)a[1].x);
    break;

case order_FirstMenuItem:
    a[0].x = (obj)FirstMenuItem((menu   )a[1].x);
    break;

case order_FirstGadget:
    a[0].x = (obj)FirstGadget((group  )a[1].x);
    break;



case order_GetDisplayWidth:
    a[0]._ = (uldat)GetDisplayWidth();
    break;

case order_GetDisplayHeight:
    a[0]._ = (uldat)GetDisplayHeight();
    break;


case order_SendToMsgPort:
    a[0]._ = (uldat)SendToMsgPort((msgport)a[1].x, (udat)a[2]._, (byte CONST *)a[3].V);
    break;

case order_BlindSendToMsgPort:
    BlindSendToMsgPort((msgport)a[1].x, (udat)a[2]._, (byte CONST *)a[3].V);
    break;


case order_GetOwnerSelection:
    a[0].x = (obj)GetOwnerSelection();
    break;

case order_SetOwnerSelection:
    SetOwnerSelection((time_t)a[1]._, (frac_t)a[2]._);
    break;

case order_RequestSelection:
    RequestSelection((obj)a[1].x, (uldat)a[2]._);
    break;

case order_NotifySelection:
    NotifySelection((obj)a[1].x, (uldat)a[2]._, (uldat)a[3]._, (byte CONST *)a[4].V, (uldat)a[5]._, (byte CONST *)a[6].V);
    break;


case order_SetServerUid:
    a[0]._ = (uldat)SetServerUid((uldat)a[1]._, (byte)a[2]._);
    break;




