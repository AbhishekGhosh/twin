



/* This file was automatically generated from m4/socket3.m4, do not edit! */























/*
 *  m4/m4_sockproto.m4 --  macroized prototypes for libTw functions.
 *                   used as template for a lot of autogenerated files.
 *
 *                   the prototypes are used both on client and server side
 *                   to implement function calls <-> socket data stream
 *                   conversion.
 *                   You can also see this as a custom version of
 *                   remote procedure calling.
 *
 *  Copyright (C) 1999-2001 by Massimiliano Ghilardi
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 */

/*

 format of this file: each non-empty line is of the form
 
 PROTO(<rettype>,<retflag>, <action>,<object>,<self>, <arg1type>,<arg1flag>, ...)

 the number of arguments the function wants must be deduced
 from the number of formal args in each PROTO(...) definition.

 <flag> : v = void
	  _ = scalar (any integer)
	  x = pointer
	  V(len) = vector of <len> elements
		<len> can be an expression, and may access the other arguments
		of the function as a[n]._ where <n> is the progressive number
		of the argument: a[1]._ is the first arg, a[2]._ the second, ...
	  W(len) = vector of <len> elements, with double-checking/autodetect on len
		so that you can safely pass NULL instead of the vector.

 Function calls wait until server has processed the command and returned the result
 if their return value is not void.
 
 <action> : the function name (Create, Map, Delete, ...)
 <object> : the object it acts upon (Gadget, Window, ...)
 
 <self> : 0 if the server implementation does not need the Fn##object method pointer
	: 1 if the function in the server needs the Fn##object method pointer
	: 2 if the Fn##object method pointer is extracted from the first argument
	

*/

#define OK_MAGIC	((uldat)0x3E4B4F3Cul)
#define FAIL_MAGIC	((uldat)0xFFFFFFFFul)

#define FIND_MAGIC		((uldat)0x646E6946ul) /* i.e. "Find" */
#define MSG_MAGIC		((uldat)0x2167734dul) /* i.e. "Msg!" */

  case order_FindFunction:
    switch (n) {
      case 2: L = a[1]._; break;
      case 4: L = a[3]._; break;
    }
    break;










  case order_AttachHW:
    switch (n) {
      case 2: L = a[1]._; break;
    }
    break;
  case order_DetachHW:
    switch (n) {
      case 2: L = a[1]._; break;
    }
    break;

  case order_SetFontTranslation:
    switch (n) {
      case 1: L = 0x80; break;
    }
    break;
  case order_SetUniFontTranslation:
    switch (n) {
      case 1: L = 0x80; break;
    }
    break;





 /* it is wrapped in socket.c */




  case order_ExposeWidget:
    switch (n) {
      case 6: L = a[2]._*a[3]._; break;
      case 7: L = a[2]._*a[3]._; break;
      case 8: L = a[2]._*a[3]._; break;
    }
    break;
				    

  case order_CreateGadget:
    switch (n) {
      case 4: L = a[2]._*a[3]._; break;
    }
    break;

  case order_CreateButtonGadget:
    switch (n) {
      case 4: L = a[2]._*a[3]._; break;
    }
    break;

  case order_WriteTextsGadget:
    switch (n) {
      case 5: L = a[2]._*a[3]._; break;
    }
    break;
  case order_WriteHWFontsGadget:
    switch (n) {
      case 5: L = a[2]._*a[3]._; break;
    }
    break;

									
  case order_Create4MenuRow:
    switch (n) {
      case 5: L = a[4]._; break;
    }
    break;

  case order_CreateWindow:
    switch (n) {
      case 2: L = a[1]._; break;
      case 3: L = a[1]._; break;
    }
    break;

  case order_WriteAsciiWindow:
    switch (n) {
      case 3: L = a[2]._; break;
    }
    break;
  case order_WriteStringWindow:
    switch (n) {
      case 3: L = a[2]._; break;
    }
    break;
  case order_WriteHWFontWindow:
    switch (n) {
      case 3: L = a[2]._; break;
    }
    break;
  case order_WriteHWAttrWindow:
    switch (n) {
      case 5: L = a[4]._; break;
    }
    break;
  case order_WriteRowWindow:
    switch (n) {
      case 3: L = a[2]._; break;
    }
    break;

















  case order_Create4MenuMenuItem:
    switch (n) {
      case 5: L = a[4]._; break;
    }
    break;



  case order_SetInfoMenu:
    switch (n) {
      case 4: L = a[3]._; break;
      case 5: L = a[3]._; break;
    }
    break;

  case order_CreateMsgPort:
    switch (n) {
      case 2: L = a[1]._; break;
    }
    break;
  case order_FindMsgPort:
    switch (n) {
      case 3: L = a[2]._; break;
    }
    break;

  case order_BgImageScreen:
    switch (n) {
      case 4: L = a[2]._*a[3]._; break;
    }
    break;



























  case order_SendToMsgPort:
    switch (n) {
      case 3: L = a[2]._; break;
    }
    break;
  case order_BlindSendToMsgPort:
    switch (n) {
      case 3: L = a[2]._; break;
    }
    break;




  case order_NotifySelection:
    switch (n) {
      case 4: L = TW_MAX_MIMELEN; break;
      case 6: L = a[5]._; break;
    }
    break;





